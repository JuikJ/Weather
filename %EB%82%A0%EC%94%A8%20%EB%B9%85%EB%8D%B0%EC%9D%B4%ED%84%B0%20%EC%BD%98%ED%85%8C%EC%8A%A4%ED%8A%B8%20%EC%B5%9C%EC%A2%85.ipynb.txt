{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9af3f38f-c373-4ed6-85b8-f2ae8857bd98",
   "metadata": {},
   "source": [
    "# 주제 : 공동주택 전력수요 예측 개선\n",
    "\n",
    "* 기상변수 및 공공데이터 등 활용 공동주택 전력수요 증감 영향 요인 분석\n",
    "* 계절, 지역에 따른 모델 세분화를 통한 공동주택 전력 수요 예측 (전력기상지수) 최적모델 개발\n",
    "* 전력기상지수 : 기상변화에 따른 지역별 공동주택의 예상되는 전력부하 변화를 기상예보처럼 국민들이 쉽게 인지할 수 있도록 수치화하여 예측해주는 서비스\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "164f39ff-f8b1-4b19-b4ec-f1f81c5f0f66",
   "metadata": {},
   "source": [
    "# Column Information\n",
    "\n",
    "* num : 격자 넘버 - 기상청 동네예보 격자넘버\n",
    "* tm : 날짜 - 공동주택 전력부하 측정 날짜 시간포함, 단위(0 ~ 23시)\n",
    "* hh24 : 시간 - 공동주택 전력부하 측정 시간(1 ~ 24), 5시는 4시 1분 ~ 5시 00분 까지 전력 부하를 의미\n",
    "* n : 공동주택 수 - 해당격자의 전력통계 산출에 포함된 공동주택의 수, 단위(단지)\n",
    "* stn : 지점 번호 - AWS 지점 번호, AWS(Automated Weather Station, 자동기상관측장비)는 과거에 사람이 직접 관측하던 것을 자동으로 관측할 수 있도록 설계한 기상관측장비\n",
    "* sum_qctr : 계약전력합계 - 해당격자의 전력통계 산출에 포함된 공동주택의 계약전력 합계\n",
    "* sum_load : 전력수요합계 - 해당격자/시각에 측정된 공동주택의 전력수요 합계\n",
    "* n_mean_load : 전력부하량평균 - 격자내 총 전력부하량을 아파트 수로 나누어 격자의 평균 부하량을 산출\n",
    "* nph_ta : 기온 - 단위(C)\n",
    "* nph_hm : 상대습도 - 단위(%)\n",
    "* nph_ws_10m : 풍속 - 객관분석 10분 평균 풍속, 단위(m/s)\n",
    "* nph_rn_60m : 강수량 - 객관분석 1시간 누적 강수량, 단위(mm)\n",
    "* nph_ta_chi : 체감온도 - 단위(C)\n",
    "* weekday : 요일 - 요일을 숫자형식으로 표시 월요일(0) ~ 일요일(6)\n",
    "* week_name : 주중 주말 - 주중 주말을 숫자형식으로 표시, 주중(0) ~ 주말(1)\n",
    "* elec : 전력기상지수(TARGET) - 해당 격자의 공동주택의 연평균 부하량을 100으로 했을 때, 해당 시작에 예상되는 부하량을 상대적인 수치로 표현"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ace5261-515d-4a9e-b2e8-0633504bda3b",
   "metadata": {},
   "source": [
    "# 주의할 점\n",
    "\n",
    "* test 데이터는 전력기상지수를 산출할 수 있는 변수인 sum_qctr, n, sum_load, n_mean_load를 제외하고 제공됨"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83dc8dc9-684c-4ee2-a25b-147d5de95b2f",
   "metadata": {},
   "source": [
    "# 데이터 & 라이브러리 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8184810-72d2-4312-98b4-e821d35c6d2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import copy\n",
    "\n",
    "from scipy.stats import skew\n",
    "from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
    "\n",
    "import lightgbm as lgb\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
    "from catboost import CatBoostRegressor, Pool\n",
    "\n",
    "import optuna\n",
    "from optuna import Trial\n",
    "from optuna.samplers import TPESampler\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6ae71481-f0c5-49c6-8be4-943f3bc24b7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('/Users/jangjuik/Desktop/electric/electric_train_mac.csv', index_col = 0)\n",
    "test = pd.read_csv('/Users/jangjuik/Desktop/electric/electric_test_mac.csv', index_col = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0b787a-4804-4c23-a10c-85e923b4a91b",
   "metadata": {},
   "source": [
    "# 시간 관련 피처 생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c3a26db9-50de-464a-a154-3a76bf9a815c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 컬럼명 변경\n",
    "train.columns = train.columns.str.replace('electric_train.', '')\n",
    "test.columns = test.columns.str.replace('electric_test.', '')\n",
    "\n",
    "def Time_and_Season(df):\n",
    "    df['tm'] = pd.to_datetime(df['tm'], format = '%Y-%m-%d %H:%M:%S')\n",
    "    df['Year'] = df['tm'].dt.year\n",
    "    df['Month'] = df['tm'].dt.month\n",
    "    df['day'] = df['tm'].dt.day\n",
    "\n",
    "    conditions = [\n",
    "        \n",
    "    df['Month'].isin([3,4,5]),\n",
    "    df['Month'].isin([6,7,8]),\n",
    "    df['Month'].isin([9,10,11]),\n",
    "    df['Month'].isin([12,1,2]),]\n",
    "    choices = [1,2,3,4]\n",
    "    \n",
    "    df['Season'] = np.select(conditions, choices, default = 0)\n",
    "\n",
    "    return df\n",
    "\n",
    "train = Time_and_Season(train)\n",
    "test = Time_and_Season(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ea12e3d-6e29-4b07-8bb3-2b3051f91b01",
   "metadata": {},
   "source": [
    "# 데이터 파악"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7330fdfa-1b45-4b97-918f-fd8c953ead31",
   "metadata": {},
   "outputs": [],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7711402-e906-4c62-8910-d60c10efa1c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e69e7f62-05d1-40f0-9e32-a6bf429e8fa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b76ffd7-47e7-453d-b4d0-6a0f2b4898ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97438bb4-7398-4ca9-ae69-db07660a4c2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74a21f5b-a981-4c8e-9235-ccd1eae23360",
   "metadata": {},
   "outputs": [],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f49401b-26f8-4ad5-811c-912e6969bf52",
   "metadata": {},
   "source": [
    "# 데이터 전처리"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7321efc-220f-487a-a305-5789b302c6eb",
   "metadata": {},
   "source": [
    "데이터에는 -99로 입력된 값이 있어 이를 NaN으로 바꾼 후 확인해서 처리하였다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "489d4ca2-d0a7-42eb-9ac6-b3bfffb997f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.replace(-99, np.nan, inplace = True)\n",
    "test.replace(-99, np.nan, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "987f3b39-487e-4742-aca3-53608cf6e26c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num              0\n",
       "tm               0\n",
       "hh24             0\n",
       "n                0\n",
       "stn              0\n",
       "sum_qctr         0\n",
       "sum_load         0\n",
       "n_mean_load      0\n",
       "nph_ta           0\n",
       "nph_hm           0\n",
       "nph_ws_10m     169\n",
       "nph_rn_60m       0\n",
       "nph_ta_chi       0\n",
       "weekday          0\n",
       "week_name        0\n",
       "elec             5\n",
       "Year             0\n",
       "Month            0\n",
       "day              0\n",
       "Season           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "95bfc873-b354-4a01-93cd-a207ea573137",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num           0\n",
       "tm            0\n",
       "hh24          0\n",
       "stn           0\n",
       "nph_ta        0\n",
       "nph_hm        0\n",
       "nph_ws_10m    0\n",
       "nph_rn_60m    0\n",
       "nph_ta_chi    0\n",
       "weekday       0\n",
       "week_name     0\n",
       "Year          0\n",
       "Month         0\n",
       "day           0\n",
       "Season        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02153e7d-2cbb-491d-8969-3c6957abd4f0",
   "metadata": {},
   "source": [
    "train set은 총 174개의 결측치를 가지고 있고, test set은 결측치가 없다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7cb333ba-140d-4cfd-98fd-1be466880533",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "missing_ratio_train = train.isnull().mean().sort_values(ascending = False).apply(lambda x : round(x, 6))\n",
    "columns = ['ratio']\n",
    "missing_df_train = pd.DataFrame(missing_ratio_train, columns = columns)\n",
    "missing_column_train = missing_df_train[missing_df_train['ratio'] > 0]\n",
    "\n",
    "plt.figure(figsize = (8, 6))\n",
    "missing_column_train.plot(kind = 'bar', color = 'skyblue')\n",
    "plt.xlabel('Columns')\n",
    "plt.ylabel('Missing Value Ratio')\n",
    "plt.title('Missing Value Ratio per Column (train)')\n",
    "plt.xticks(rotation = 0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d94e032c-b193-4801-8162-5cf903ddbecf",
   "metadata": {},
   "source": [
    "시계열 데이터나 연속된 수치를 가지는 데이터의 경우에는 일종의 연속성이 있는 패턴을 발견할 수 있다.<br>\n",
    "이런 경우 보간법을 통해 앞, 뒤 값을 유추하여 결측치를 채워줄 수 있다.<br>\n",
    "여기서는 선형 보간법을 사용해서 처리했다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f477ee11-8c43-4cba-a56b-2e080ef4e6e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['elec'] = train['elec'].interpolate(method = 'linear')\n",
    "train['nph_ws_10m'] = train['nph_ws_10m'].interpolate(method = 'linear')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2854258f-b728-4301-852a-edf461dff427",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46c016b9-2f74-4368-851a-37e6d74197b6",
   "metadata": {},
   "source": [
    "## 1) 전력기상지수 분포"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcc7f4c9-2ec4-4571-9239-565af8402951",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "sns.histplot(train['elec'], bins = 30, kde = True)\n",
    "plt.title('Distribution of Elec')\n",
    "plt.xlabel('Elec')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f42328e-ba43-47be-8d47-ac6cfc20b593",
   "metadata": {},
   "source": [
    "## 2) 변수들의 상관관계 파악"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56aa571a-2e91-4cdc-8851-c06d4659aae3",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_data = train.sample(n = 10000, random_state = 42)\n",
    "corr_matrix = sample_data.corr()\n",
    "plt.figure(figsize = (12, 10))\n",
    "sns.heatmap(corr_matrix, annot = True, fmt = '.2f', cmap = 'coolwarm', linewidth = 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71864028-7b5d-4a55-a0e9-6b1a70013ce6",
   "metadata": {},
   "source": [
    "전력기상지수와 상관관계가 높은 변수는 hh24, sum_load, nph_ta, nph_ta_chi, week_name, nph_hm, weekday, Month, tm 순이다.\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0da905-6cc1-4b60-8ce2-745cd465e0ea",
   "metadata": {},
   "source": [
    "## 3) 전력기상지수 평균 분포 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8542fd3-408a-4abf-90d8-274a65bdb348",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 월별 전력기상지수(elec)를 평균내어 그래프로 시각화\n",
    "\n",
    "colors = ['magenta', 'green', 'blue']\n",
    "\n",
    "monthly_elec = train.groupby(['Year', 'Month'])['elec'].mean()[:-1].reset_index()  # 2023년 1월 제외\n",
    "grouped_data_elec = monthly_elec.groupby('Year')\n",
    "\n",
    "plt.figure(figsize = (12,6))\n",
    "\n",
    "for i, (year, group) in enumerate(grouped_data_elec):\n",
    "    plt.plot(group['Month'], group['elec'], label = f'{year}', color = colors[i])\n",
    "\n",
    "plt.title('Elec by Month')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('elec')\n",
    "plt.xticks(range(1, 13), [str(month) for month in range(1, 13)])\n",
    "plt.legend(title = 'Year')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f6cb2a5-1686-4c86-b959-c4723a361717",
   "metadata": {},
   "source": [
    "여름에 전력기상지수가 높게 나타나는 것을 알 수 있음<br>\n",
    "또한 2020년과 그 외의 년도가 다소 다른데, 2020년은 6월 말부터 8월 중순까지 54일간 지속된 역대급 장마를 겪으며 6월과 7월은 다른 년도에 비해<br>\n",
    "월별 전력기상지수가 낮게 나타남을 알 수 있다. 8월의 전국 평균 기온은 26.6 도로 역대 6위를 달성하여 전국적으로 높은 기온을 보여 전력 기상지수가 급격히 증가함을 알 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eb1e0a7-2271-4d73-ad13-5b86f9bb4eac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 전력기상지수(elec)를 주중과 주말로 나눠서 시각화\n",
    "\n",
    "monthly_wn = train.groupby(['Year','Month','week_name'])['elec'].mean()[:-1].reset_index()  # 2023년 1월 1일 제외\n",
    "\n",
    "weekday_data = monthly_wn[monthly_wn['week_name'] == 0]\n",
    "weekend_data = monthly_wn[monthly_wn['week_name'] == 1]\n",
    "\n",
    "weekday_grouped = weekday_data.groupby(['Year', 'Month']).first()\n",
    "weekend_grouped = weekend_data.groupby(['Year', 'Month']).first()\n",
    "\n",
    "fig, axes = plt.subplots(nrows = 2, ncols = 1, figsize = (12, 10))\n",
    "\n",
    "# 주중 그래프\n",
    "for year, group in weekday_grouped.groupby(level = 0):\n",
    "    axes[0].plot(group.index.get_level_values('Month'), group['elec'], marker = 'o', label = f'{year}')\n",
    "axes[0].set_title('Weekday elec')\n",
    "axes[0].set_xlabel('Month')\n",
    "axes[0].set_ylabel('elec')\n",
    "axes[0].legend(title = 'Year')\n",
    "axes[0].grid(True)\n",
    "\n",
    "# 주말 그래프\n",
    "for year, group in weekend_grouped.groupby(level = 0):\n",
    "    axes[1].plot(group.index.get_level_values('Month'), group['elec'], marker = 'o', label = f'{year}')\n",
    "axes[1].set_title('Weekend sum_load')\n",
    "axes[1].set_xlabel('Month')\n",
    "axes[1].set_ylabel('elec')\n",
    "axes[1].legend(title = 'Year')\n",
    "axes[1].grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5515bb54-4279-4fec-8d7b-724c12f279ac",
   "metadata": {},
   "source": [
    "전력기상지수는 주중과 주말 비슷한 양상을 보인다.\n",
    "그러나 주말이 상대적으로 주중보다 전력기상지수가 높다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5218b38b-4372-4c99-baa1-1c909aed522d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 전력기상지수(elec)를 요일별로 나눠서 시각화\n",
    "\n",
    "day_data = train.groupby(['Year','weekday'])['elec'].mean()[:-1].reset_index() # 2023년 1월 1일 제외\n",
    "\n",
    "fig, axes = plt.subplots(nrows = 3, ncols = 1, figsize = (10, 10))\n",
    "\n",
    "for i, year in enumerate(day_data['Year'].unique()):\n",
    "    year_data = day_data[day_data['Year'] == year]\n",
    "    axes[i].plot(year_data['weekday'], year_data['elec'], marker = 'o', color = 'green')\n",
    "    axes[i].set_title(f'Elec by Weekday for year {year}')\n",
    "    axes[i].set_ylabel('Elec')\n",
    "    axes[i].set_xticks(range(7))\n",
    "    axes[i].set_xticklabels(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n",
    "    axes[i].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62c04b9d-8fc1-45e8-9da1-175252556b11",
   "metadata": {},
   "source": [
    "전력기상지수는 주말에 더 높게 나타나는 모습을 보임. 아마도 주말에는 출근하지 않는 사람이 많다보니 공동주택 전력수요가 증가해서 그런듯함"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c1bf83f-349b-4cc5-8fe0-6b4f7d6ac636",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 계절별 시간대별 전력기상지수 시각화\n",
    "plt.figure(figsize=(14, 8))\n",
    "plot = sns.lineplot(data=train, x='hh24', y='elec', hue='Season', palette='tab10', marker='o')\n",
    "\n",
    "# 범례 수정\n",
    "handles, labels = plot.get_legend_handles_labels()\n",
    "new_labels = ['Spring (1)', 'Summer (2)', 'Fall (3)', 'Winter (4)']\n",
    "plot.legend(handles=handles, labels=new_labels, title='Season')\n",
    "\n",
    "plt.title('Electric Weather Index (elec) by Hour and Season')\n",
    "plt.xlabel('Hour of the Day')\n",
    "plt.ylabel('Electric Weather Index (elec)')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ef06398-46c0-468b-b39c-f53dbe59b32e",
   "metadata": {},
   "source": [
    "여름에 전력기상지수가 가장 높게 나타나고, 그 다음으로 겨울이 높게 나타나는 것을 알 수 있음<br>\n",
    "또한, 오후 4시부터 증가하기 시작하여 오후 8-9시 쯤에 피크"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "633e1131-9ff2-441b-bce4-65f7aabf428c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 월별 시간대에 따른 전력기상지수(elec)를 시각화\n",
    "\n",
    "# 서브플롯 생성\n",
    "fig, axes = plt.subplots(3, 4, figsize=(20, 15), sharey=True)\n",
    "axes = axes.flatten()\n",
    "\n",
    "# 각 월별로 서브플롯에 그래프 그리기\n",
    "for i in range(1, 13):\n",
    "    ax = axes[i - 1]\n",
    "    month_data =train[train['Month'] == i]\n",
    "    if not month_data.empty:\n",
    "        sns.lineplot(data=month_data, x='hh24', y='elec', ax=ax, marker='o')\n",
    "        ax.set_title(f'Month {i}')\n",
    "        ax.set_xlabel('Hour of the Day')\n",
    "        ax.set_ylabel('Electric Weather Index (elec)')\n",
    "    else:\n",
    "        ax.set_visible(False)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0192b4b5-1229-4c60-8d44-27c84a396b59",
   "metadata": {},
   "source": [
    "전력부하가 많은 7,8월에 전력기상지수가 가장 높게 나타나고, 항상 오후 8-9시쯤이 피크\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d043e9e1-11c1-48fd-9084-6f3fe3d3e41a",
   "metadata": {},
   "source": [
    "# 아파트 매매 가격과 전력 수요량의 관계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f89597e-d49b-4f93-b23a-6db3721e2923",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 아파트 ㎡당 매매평균가격(최근 5년)\n",
    "apartment = pd.read_excel('/Users/jangjuik/Desktop/electric/code/아파트 ㎡당 매매평균가격_20240603.xlsx')\n",
    "apartment = apartment.transpose()\n",
    "apartment = apartment.drop(apartment.index[0]).reset_index()\n",
    "new_columns = ['DateTime', '강북14개구', '종로구', '중구', '용산구', '성동구', '광진구', '동대문구', '중랑구', '성북구', \n",
    "               '강북구', '도봉구', '노원구', '은평구', '서대문구', '마포구', '강남11개구', '양천구', '강서구', '구로구', \n",
    "               '금천구', '영등포구', '동작구', '관악구', '서초구', '강남구', '송파구', '강동구']\n",
    "apartment.columns = new_columns\n",
    "\n",
    "apartment['DateTime'] = pd.to_datetime(apartment['DateTime'])\n",
    "\n",
    "# 2022년 데이터만 필터링\n",
    "apartment_2022 = apartment[apartment['DateTime'].dt.year == 2022]\n",
    "\n",
    "# 서울시 모든 구의 평균 매매가격 구하기\n",
    "seoul_avg_price = apartment_2022.drop(columns=['DateTime', '강북14개구', '강남11개구']).mean().sort_values(ascending = False)\n",
    "\n",
    "korean_to_english = {\n",
    "    '종로구': 'jongno-gu',\n",
    "    '중구': 'jung-gu',\n",
    "    '용산구': 'yongsan-gu',\n",
    "    '성동구': 'seongdong-gu',\n",
    "    '광진구': 'gwangjin-gu',\n",
    "    '동대문구': 'dongdaemun-gu',\n",
    "    '중랑구': 'jungrang-gu',\n",
    "    '성북구': 'seongbuk-gu',\n",
    "    '강북구': 'gangbuk-gu',\n",
    "    '도봉구': 'dobong-gu',\n",
    "    '노원구': 'nowon-gu',\n",
    "    '은평구': 'eunpyeong-gu',\n",
    "    '서대문구': 'seodaemun-gu',\n",
    "    '마포구': 'mapo-gu',\n",
    "    '양천구': 'yangcheon-gu',\n",
    "    '강서구': 'gangseo-gu',\n",
    "    '구로구': 'guro-gu',\n",
    "    '금천구': 'geumcheon-gu',\n",
    "    '영등포구': 'yeongdeungpo-gu',\n",
    "    '동작구': 'dongjak-gu',\n",
    "    '관악구': 'gwanak-gu',\n",
    "    '서초구': 'seocho-gu',\n",
    "    '강남구': 'gangnam-gu',\n",
    "    '송파구': 'songpa-gu',\n",
    "    '강동구': 'gangdong-gu'\n",
    "}\n",
    "english_district_prices = {korean_to_english[key]: value for key, value in seoul_avg_price.items()}\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "plt.bar(english_district_prices.keys(), english_district_prices.values(), color='lightgreen')\n",
    "plt.title('Average Housing Prices in Seoul by District')\n",
    "plt.xlabel('District')\n",
    "plt.ylabel('Average Price (in ten thousand won)')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.legend(['Average Price'], loc='upper right')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f49df29-49b1-46ba-b1b1-a584b4b739e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 가구 평균 전력 사용량 데이터(서울시 2022-01 ~ 2022-12)\n",
    "house1 = pd.read_excel(\"/Users/jangjuik/Desktop/electric/code/가구 평균 월별 전력사용량_20220106.xls\")\n",
    "house2 = pd.read_excel(\"/Users/jangjuik/Desktop/electric/code/가구 평균 월별 전력사용량_20220712.xls\")\n",
    "house1 = house1.drop(house1.index[:3])\n",
    "house1.index = range(len(house1))\n",
    "new_columns = ['Datetime', '시도', '시군구', '대상가구수(호)', '가구당 평균 전력 사용량(kWh)', '가구당 평균 전기요금(원)']\n",
    "house1.columns = new_columns\n",
    "\n",
    "house2 = house2.drop(house2.index[:3])\n",
    "house2.index = range(len(house2))\n",
    "new_columns = ['Datetime', '시도', '시군구', '대상가구수(호)', '가구당 평균 전력 사용량(kWh)', '가구당 평균 전기요금(원)']\n",
    "house2.columns = new_columns\n",
    "\n",
    "house = pd.concat([house1, house2])\n",
    "\n",
    "house = house[house['Datetime'] != '년월']\n",
    "house = house[house['시군구'] != '전체']\n",
    "house = house.dropna()\n",
    "house.index = range(len(house))\n",
    "\n",
    "house['Datetime'] = pd.to_datetime(house['Datetime'], format='%Y%m')\n",
    "\n",
    "# '대상가구수(호)' 열의 쉼표 제거 후 정수형으로 변환\n",
    "house['대상가구수(호)'] = house['대상가구수(호)'].str.replace(',', '').astype(int)\n",
    "\n",
    "# '가구당 평균 전기요금(원)' 열의 쉼표 제거 후 정수형으로 변환\n",
    "house['가구당 평균 전기요금(원)'] = house['가구당 평균 전기요금(원)'].str.replace(',', '').astype(int)\n",
    "\n",
    "house['대상가구수(호)'] = house['대상가구수(호)'].astype(int)\n",
    "house['가구당 평균 전력 사용량(kWh)'] = house['가구당 평균 전력 사용량(kWh)'].astype(int)\n",
    "house['가구당 평균 전기요금(원)'] = house['가구당 평균 전기요금(원)'].astype(int)\n",
    "\n",
    "all_gu_df = pd.DataFrame(columns=house.columns)\n",
    "\n",
    "for gu in house['시군구'].unique():\n",
    "    gu_df = house[house['시군구'] == gu]\n",
    "    all_gu_df = pd.concat([all_gu_df, gu_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0880332e-b1cb-4e0f-8913-34ad53d1c3df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 시각화\n",
    "\n",
    "plt.figure(figsize=(14, 8))\n",
    "\n",
    "# 각 선에 대한 영어 이름 설정 및 색상 팔레트 변경\n",
    "colors = sns.color_palette(\"husl\", len(korean_to_english))\n",
    "for i, (gu_korean, gu_english) in enumerate(korean_to_english.items()):\n",
    "    gu_df = all_gu_df[all_gu_df['시군구'] == gu_korean]\n",
    "    sns.lineplot(data=gu_df, x='Datetime', y='가구당 평균 전력 사용량(kWh)', label=gu_english, marker='o', color=colors[i])\n",
    "\n",
    "plt.title('Average electricity usage per household in Seoul by district from January to December')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Kwh')\n",
    "plt.grid(True)\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "\n",
    "# 범례 위치 조정\n",
    "plt.legend(bbox_to_anchor=(1, 1), ncol=1)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d081e1e0-04ef-41ce-a421-167aebf9eb78",
   "metadata": {},
   "source": [
    "2022년의 서울시 구별 아파트 평균 매매가격을 시각화해보니, <br>\n",
    "강남구가 2582만원으로 가장 높고, 금천구가 898만원으로 가장 낮게 나타났다. <br>\n",
    "\n",
    "2022년 1월 ~ 2022년 12월 서울시 구별 가구당 평균 전력 사용량(kWh)을 시각화해보니,<br>\n",
    "8월에는 서초구가 416으로 가장 높고, 관악구가 259로 가장 낮게 나타났다.<br>\n",
    "관악구는 2022년에 1인가구의 수가 약 17만으로, 전체 가구 수의 60%에 해당한다.<br>\n",
    "\n",
    "아파트 평균 매매가격과 전력 사용량에는 상관이 다소 있는 것으로 보인다.<br>\n",
    "매매가격 상위 구역과 전력 사용량 상위 구역은 비슷하게 나타난다.<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23e44b03-66fc-4aab-9c03-239dae5f2262",
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_power_usage = house.groupby('시군구')['가구당 평균 전력 사용량(kWh)'].mean().sort_values(ascending = False)\n",
    "seoul_avg_price = apartment_2022.drop(columns=['DateTime', '강북14개구', '강남11개구']).mean().sort_values(ascending = False)\n",
    "\n",
    "df_avg_power_usage = pd.DataFrame(list(avg_power_usage.items()), columns=['시군구', '가구당 평균 전력 사용량(kWh)'])\n",
    "df_seoul_avg_price = pd.DataFrame(list(seoul_avg_price.items()), columns=['시군구', '평균매매가격'])\n",
    "\n",
    "merged_df = pd.merge(df_avg_power_usage, df_seoul_avg_price, on='시군구')\n",
    "\n",
    "# 시군구를 기준으로 데이터프레임 정렬\n",
    "merged_df.sort_values(by='시군구', inplace=True)\n",
    "\n",
    "# '시군구' 열을 인덱스로 설정\n",
    "merged_df.set_index('시군구', inplace=True)\n",
    "\n",
    "# 상관관계 계산\n",
    "correlation = merged_df.corr(method='pearson')\n",
    "\n",
    "# 결과 출력\n",
    "print(correlation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "503eadac-ba89-4624-9df6-6db693c38305",
   "metadata": {},
   "source": [
    "아파트 평균매매가격과 가구당 평균 전력 사용량에는 약 0.66의 양의 상관이 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e679608-487f-48de-bd54-f3dd0fa34bfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# 이상치 탐색\n",
    "########################################\n",
    "\n",
    "# 기온, 상대습도, 풍속, 강수량, 체감온도의 이상치를 탐색한다\n",
    "# Box plot으로 분포 살펴보기\n",
    "\n",
    "# numeric_df = train[['nph_ta', 'nph_hm', 'nph_ws_10m', 'nph_ta_chi']]\n",
    "\n",
    "# fig, axes = plt.subplots(2, 2, figsize = (15, 10))\n",
    "\n",
    "# for i, col in enumerate(numeric_df.columns):\n",
    "    # sns.boxplot(x = numeric_df[col], ax = axes[i // 2, i % 2])\n",
    "    # axes[i // 2, i % 2].set_title(f'Box plot for {col}')\n",
    "# plt.tight_layout()\n",
    "# plt.show()\n",
    "\n",
    "# 각 column에 대한 이상치 탐색(IQR 기반)\n",
    "\n",
    "# total_rows = train.shape[0]\n",
    "# outliers_ratios = {}\n",
    "\n",
    "# sets_index = set()\n",
    "# for col in numeric_df.columns:\n",
    "    # Q1 = numeric_df[col].quantile(0.25)\n",
    "    # Q3 = numeric_df[col].quantile(0.75)\n",
    "\n",
    "    # IQR = Q3 - Q1\n",
    "\n",
    "    # upper_bound = Q3 + 1.5 * IQR\n",
    "    # lower_bound = Q1 - 1.5 * IQR\n",
    "\n",
    "\n",
    "    # outliers = numeric_df[(numeric_df[col] < lower_bound)| (numeric_df[col] > upper_bound)]\n",
    "\n",
    "    # outlier_ratio = len(outliers) / total_rows\n",
    "    # outliers_ratios[col] = outlier_ratio\n",
    "\n",
    "    # outliers_index = numeric_df[(numeric_df[col] < lower_bound)| (numeric_df[col] > upper_bound)].index\n",
    "\n",
    "    # sets_index.update(outliers_index)\n",
    "\n",
    "# for col, ratio in outliers_ratios.items():\n",
    "    # print(f'{col} 열의 이상치 비율 : {ratio : .2%}')\n",
    "\n",
    "# train = train.drop(sets_index).reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4c534b7-1f38-472c-8307-a21a167cf8ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# 로그변환 \n",
    "########################################\n",
    "\n",
    "# 변수들의 왜도 파악하기\n",
    "# columns_to_visualize = ['nph_ta', 'nph_hm', 'nph_ws_10m', 'nph_rn_60m', 'nph_ta_chi']\n",
    "# fig, axes = plt.subplots(nrows = 1, ncols = 5, figsize = (15, 5))\n",
    "\n",
    "# 각 열에 대해 히스토그램 그리기\n",
    "# for i, column in enumerate(columns_to_visualize):\n",
    "    # ax = axes[i]\n",
    "    # ax.hist(train[column], bins = 30, color = 'skyblue', edgecolor = 'black')\n",
    "    # ax.set_title(column)\n",
    "    # ax.set_xlabel('Value')\n",
    "    # ax.set_ylabel('Frequency')\n",
    "    # ax.grid(True)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()\n",
    "\n",
    "# skewness = train[columns_to_visualize].skew()\n",
    "# print(skewness)\n",
    "\n",
    "# nph_ws_10m, nph_rn_60m 변수의 로그변환을 진행\n",
    "\n",
    "# train['nph_ws_10m_log'] = np.log1p(train['nph_ws_10m'])\n",
    "# train['nph_rn_60m_log'] = np.log1p(train['nph_rn_60m'])\n",
    "\n",
    "# test['nph_ws_10m_log'] = np.log1p(test['nph_ws_10m'])\n",
    "# test['nph_rn_60m_log'] = np.log1p(test['nph_rn_60m'])\n",
    "\n",
    "# fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (15, 5))\n",
    "# log_columns = ['nph_rn_60m_log', 'nph_ws_10m_log']\n",
    "\n",
    "# 로그변환 후 히스토그램 그리기\n",
    "# for i, column in enumerate(log_columns):\n",
    "    # ax = axes[i]\n",
    "    # ax.hist(train[column], bins = 30, color = 'skyblue', edgecolor = 'black')\n",
    "    # ax.set_title(column)\n",
    "    # ax.set_xlabel('Value')\n",
    "    # ax.set_ylabel('Frequency')\n",
    "    # ax.grid(True)\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "982fb21b-3792-4838-bd6b-f0c1df20b25e",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8c1f1643-0e64-4aae-a116-281476038cee",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# sin, cos 시간 변수 생성\n",
    "########################################\n",
    "\n",
    "# 주기성을 위하여 sin, cos 함수 적용\n",
    "\n",
    "train['sin_time'] = np.sin(2 * np.pi * train.hh24 / 24)\n",
    "test['sin_time'] = np.sin(2 * np.pi * test.hh24 / 24)\n",
    "\n",
    "train['cos_time'] = np.cos(2 * np.pi * train.hh24 / 24)\n",
    "test['cos_time'] = np.cos(2 * np.pi * test.hh24 / 24)\n",
    "\n",
    "train['sin_month'] = np.sin(2 * np.pi * train.Month / 12)\n",
    "test['sin_month'] = np.sin(2 * np.pi * test.Month / 12)\n",
    "\n",
    "train['cos_month'] = np.cos(2 * np.pi * train.Month / 12)\n",
    "test['cos_month'] = np.cos(2 * np.pi * test.Month / 12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27e387d8-32e8-4579-931a-7b4473607adf",
   "metadata": {},
   "source": [
    "시간은 1 ~ 24의 값으로 주어진다. 1시와 24시는 매우 가까운 시간인데, 컴퓨터는 이를 멀다고 인식을 하므로 <br>\n",
    "주기성을 위해 변수를 생성함\n",
    "\n",
    "tm 변수를 통해 생성한 Month도 같은 방법으로 처리했다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "69ed69ed-6b9a-40b8-b188-5b874337c333",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# 불쾌지수 변수 생성\n",
    "########################################\n",
    "\n",
    "train['THI'] = 9/5 * train['nph_ta'] - 0.55 * (1 - train['nph_hm'] / 100) * (9/5 * train['nph_ta'] - 26) + 32\n",
    "test['THI'] = 9/5 * test['nph_ta'] - 0.55 * (1 - test['nph_hm'] / 100) * (9/5 * test['nph_ta'] - 26) + 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b887174-13b0-4484-be9e-a870da1f7509",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# 기온, 습도, 강수량 이동평균, 이동표준편차 변수 생성\n",
    "########################################\n",
    "\n",
    "# 24 * 7 = 168, 7일치의 관측치를 사용하여 이동평균 계산\n",
    "train['temperature_7d_ma'] = train['nph_ta_chi'].rolling(window = 168, min_periods= 1).mean()\n",
    "test['temperature_7d_ma'] = test['nph_ta_chi'].rolling(window = 168, min_periods= 1).mean()\n",
    "\n",
    "train['humidity_7d_ma'] = train['nph_hm'].rolling(window = 168, min_periods= 1).mean()\n",
    "test['humidity_7d_ma'] = test['nph_hm'].rolling(window = 168, min_periods= 1).mean()\n",
    "\n",
    "train['precipitation_7d_ma'] = train['nph_rn_60m'].rolling(window = 168, min_periods= 1).mean()\n",
    "test['precipitation_7d_ma'] = test['nph_rn_60m'].rolling(window = 168, min_periods= 1).mean()\n",
    "\n",
    "train['temperature_7d_std'] = train['nph_ta_chi'].rolling(window = 168, min_periods= 1).std()\n",
    "test['temperature_7d_std'] = test['nph_ta_chi'].rolling(window = 168, min_periods = 1).std()\n",
    "\n",
    "train['humidity_7d_std'] = train['nph_hm'].rolling(window = 168, min_periods= 1).std()\n",
    "test['humidity_7d_std'] = test['nph_hm'].rolling(window = 168, min_periods = 1).std()\n",
    "\n",
    "train['precipitation_7d_std'] = train['nph_rn_60m'].rolling(window = 168, min_periods= 1).std()\n",
    "test['precipitation_7d_std'] = test['nph_rn_60m'].rolling(window = 168, min_periods= 1).std()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3915347e-e490-4e88-9912-80ac9ca48027",
   "metadata": {},
   "source": [
    "기온, 습도, 강수량의 이상치를 보완하기 위해 7일간의 관측치를 사용하여 이동평균, 이동표준편차 변수를 만들었다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3080b6dc-0bd4-4afc-b052-6a35e1374e58",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# 폭염 여부 변수 생성(체감온도 사용)\n",
    "########################################\n",
    "\n",
    "train['Heatwave'] = (train['nph_ta_chi'] >= 31).astype(int)\n",
    "test['Heatwave'] = (test['nph_ta_chi'] >= 31).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1316fea-4e4e-429a-bb6a-54e7bac86b6f",
   "metadata": {},
   "source": [
    "체감온도가 31도가 넘으면 1, 아니면 0에 해당하는 폭염 여부 변수를 만들어주었다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0f40692e-40c8-4c12-931a-687adc374262",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# 일별 냉방도일 변수 생성(CDD)\n",
    "########################################\n",
    "\n",
    "base_temp = 24  # 기준 온도\n",
    "\n",
    "CDD_train = train.groupby(['Year', 'Month', 'day'])['nph_ta'].mean().reset_index()\n",
    "CDD_train.columns = ['Year', 'Month', 'day', 'avg_temp']\n",
    "\n",
    "CDD_train['CDD'] = CDD_train['avg_temp'].apply(lambda x: max(0, x - base_temp))\n",
    "\n",
    "CDD_test = test.groupby(['Year', 'Month', 'day'])['nph_ta'].mean().reset_index()\n",
    "CDD_test.columns = ['Year', 'Month', 'day', 'avg_temp']\n",
    "\n",
    "CDD_test['CDD'] = CDD_test['avg_temp'].apply(lambda x: max(0, x - base_temp))\n",
    "\n",
    "train = pd.merge(train, CDD_train, on=['Year', 'Month', 'day'], how='left')\n",
    "test = pd.merge(test, CDD_test, on=['Year', 'Month', 'day'], how='left')\n",
    "\n",
    "train.drop(['avg_temp'], axis = 1, inplace = True)\n",
    "test.drop(['avg_temp'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efead913-f181-43e8-a110-aadb66c8e327",
   "metadata": {},
   "source": [
    "냉방도일(CDD)는 일별 평균 기온과 기준 온도의 차를 누적한 값이다. <br>\n",
    "여기서 냉방에 필요한 에너지량을 추산하는 데 쓰는 기후지수이기도 하다. <br>\n",
    "냉방도일이 클수록 냉방에 필요한 에너지량도 커진다.\n",
    "\n",
    "여기서는 일별 냉방도일을 사용했다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dbe6008f-7184-4534-afb4-11f263897a19",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# stn 지점번호를 지역에 매핑한 변수 생성\n",
    "########################################\n",
    "\n",
    "# 기상청 기상자료개방포털 - 데이터 - 메타데이터 - 지점정보 - 지상 - 방재기상관측 / 종관기상관측\n",
    "\n",
    "# 서울\n",
    "aws_seoul = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_서울.csv', encoding='cp949')\n",
    "aws_seoul.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_seoul.loc[:, '도시'] = '서울'\n",
    "aws_seoul = aws_seoul[['지점', '도시']]\n",
    "\n",
    "aws_seoul2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_서울.csv', encoding='cp949')\n",
    "aws_seoul2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_seoul2.loc[:, '도시'] = '서울'\n",
    "aws_seoul2 = aws_seoul2[['지점', '도시']]\n",
    "\n",
    "aws_seoul_combined = pd.concat([aws_seoul, aws_seoul2]).sort_values('지점').reset_index(drop = True)\n",
    "\n",
    "# 부산\n",
    "aws_busan = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_부산.csv', encoding='cp949')\n",
    "aws_busan.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_busan.loc[:, '도시'] = '부산'\n",
    "aws_busan = aws_busan[['지점', '도시']]\n",
    "\n",
    "aws_busan2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_부산.csv', encoding='cp949')\n",
    "aws_busan2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_busan2.loc[:, '도시'] = '부산'\n",
    "aws_busan2 = aws_busan2[['지점', '도시']]\n",
    "\n",
    "aws_busan_combined = pd.concat([aws_busan, aws_busan2]).sort_values('지점').reset_index(drop = True)\n",
    "\n",
    "\n",
    "# 대구\n",
    "aws_daegu = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_대구.csv', encoding='cp949')\n",
    "aws_daegu.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_daegu.loc[:, '도시'] = '대구'\n",
    "aws_daegu = aws_daegu[['지점', '도시']]\n",
    "\n",
    "aws_daegu2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_대구.csv', encoding='cp949')\n",
    "aws_daegu2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_daegu2.loc[:, '도시'] = '대구'\n",
    "aws_daegu2 = aws_daegu2[['지점', '도시']]\n",
    "\n",
    "aws_daegu_combined = pd.concat([aws_daegu, aws_daegu2]).sort_values('지점').reset_index(drop = True)\n",
    "\n",
    "# 인천\n",
    "aws_incheon = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_인천.csv', encoding='cp949')\n",
    "aws_incheon.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_incheon.loc[:, '도시'] = '인천'\n",
    "aws_incheon = aws_incheon[['지점', '도시']]\n",
    "\n",
    "aws_incheon2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_인천.csv', encoding='cp949')\n",
    "aws_incheon2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_incheon2.loc[:, '도시'] = '인천'\n",
    "aws_incheon2 = aws_incheon2[['지점', '도시']]\n",
    "\n",
    "aws_incheon_combined = pd.concat([aws_incheon, aws_incheon2]).sort_values('지점').reset_index(drop = True)\n",
    "\n",
    "# 광주\n",
    "aws_gwangju = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_광주.csv', encoding='cp949')\n",
    "aws_gwangju.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gwangju.loc[:, '도시'] = '광주'\n",
    "aws_gwangju = aws_gwangju[['지점', '도시']]\n",
    "\n",
    "aws_gwangju2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_광주.csv', encoding='cp949')\n",
    "aws_gwangju2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gwangju2.loc[:, '도시'] = '광주'\n",
    "aws_gwangju2 = aws_gwangju2[['지점', '도시']]\n",
    "\n",
    "aws_gwangju_combined = pd.concat([aws_gwangju, aws_gwangju2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 대전\n",
    "aws_daejeon = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_대전.csv', encoding='cp949')\n",
    "aws_daejeon.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_daejeon.loc[:, '도시'] = '대전'\n",
    "aws_daejeon = aws_daejeon[['지점', '도시']]\n",
    "\n",
    "aws_daejeon2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_대전.csv', encoding='cp949')\n",
    "aws_daejeon2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_daejeon2.loc[:, '도시'] = '대전'\n",
    "aws_daejeon2 = aws_daejeon2[['지점', '도시']]\n",
    "\n",
    "aws_daejeon_combined = pd.concat([aws_daejeon, aws_daejeon2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 울산\n",
    "aws_ulsan = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_울산.csv', encoding='cp949')\n",
    "aws_ulsan.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_ulsan.loc[:, '도시'] = '울산'\n",
    "aws_ulsan = aws_ulsan[['지점', '도시']]\n",
    "\n",
    "aws_ulsan2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_울산.csv', encoding='cp949')\n",
    "aws_ulsan2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_ulsan2.loc[:, '도시'] = '울산'\n",
    "aws_ulsan2 = aws_ulsan2[['지점', '도시']]\n",
    "\n",
    "aws_ulsan_combined = pd.concat([aws_ulsan, aws_ulsan2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "\n",
    "# 세종\n",
    "aws_sejong = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_세종.csv', encoding='cp949')\n",
    "aws_sejong.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_sejong.loc[:, '도시'] = '세종'\n",
    "aws_sejong = aws_sejong[['지점', '도시']]\n",
    "\n",
    "aws_sejong2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_세종.csv', encoding='cp949')\n",
    "aws_sejong2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_sejong2.loc[:, '도시'] = '세종'\n",
    "aws_sejong2 = aws_sejong2[['지점', '도시']]\n",
    "\n",
    "aws_sejong_combined = pd.concat([aws_sejong, aws_sejong2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 경기\n",
    "aws_gyeonggi = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_경기.csv', encoding='cp949')\n",
    "aws_gyeonggi.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gyeonggi.loc[:, '도시'] = '경기'\n",
    "aws_gyeonggi = aws_gyeonggi[['지점', '도시']]\n",
    "\n",
    "aws_gyeonggi2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_경기.csv', encoding='cp949')\n",
    "aws_gyeonggi2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gyeonggi2.loc[:, '도시'] = '경기'\n",
    "aws_gyeonggi2 = aws_gyeonggi2[['지점', '도시']]\n",
    "\n",
    "aws_gyeonggi_combined = pd.concat([aws_gyeonggi, aws_gyeonggi2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 강원\n",
    "aws_gangwon = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_강원.csv', encoding='cp949')\n",
    "aws_gangwon.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gangwon.loc[:, '도시'] = '강원'\n",
    "aws_gangwon = aws_gangwon[['지점', '도시']]\n",
    "\n",
    "aws_gangwon2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_강원.csv', encoding='cp949')\n",
    "aws_gangwon2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gangwon2.loc[:, '도시'] = '강원'\n",
    "aws_gangwon2 = aws_gangwon2[['지점', '도시']]\n",
    "\n",
    "aws_gangwon_combined = pd.concat([aws_gangwon, aws_gangwon2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 충청\n",
    "aws_chungcheong = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_충청.csv', encoding='cp949')\n",
    "aws_chungcheong.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_chungcheong.loc[:, '도시'] = '충청'\n",
    "aws_chungcheong = aws_chungcheong[['지점', '도시']]\n",
    "\n",
    "aws_chungcheong2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_충청.csv', encoding='cp949')\n",
    "aws_chungcheong2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_chungcheong2.loc[:, '도시'] = '충청'\n",
    "aws_chungcheong2 = aws_chungcheong2[['지점', '도시']]\n",
    "\n",
    "aws_chungcheong_combined = pd.concat([aws_chungcheong, aws_chungcheong2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 전라\n",
    "aws_jeolla = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_전라.csv', encoding='cp949')\n",
    "aws_jeolla.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_jeolla.loc[:, '도시'] = '전라'\n",
    "aws_jeolla = aws_jeolla[['지점', '도시']]\n",
    "\n",
    "aws_jeolla2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_전라.csv', encoding='cp949')\n",
    "aws_jeolla2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_jeolla2.loc[:, '도시'] = '전라'\n",
    "aws_jeolla2 = aws_jeolla2[['지점', '도시']]\n",
    "\n",
    "aws_jeolla_combined = pd.concat([aws_jeolla, aws_jeolla2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "# 경상\n",
    "aws_gyeongsang = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_경상.csv', encoding='cp949')\n",
    "aws_gyeongsang.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gyeongsang.loc[:, '도시'] = '경상'\n",
    "aws_gyeongsang = aws_gyeongsang[['지점', '도시']]\n",
    "\n",
    "aws_gyeongsang2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_경상.csv', encoding='cp949')\n",
    "aws_gyeongsang2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_gyeongsang2.loc[:, '도시'] = '경상'\n",
    "aws_gyeongsang2 = aws_gyeongsang2[['지점', '도시']]\n",
    "\n",
    "aws_gyeongsang_combined = pd.concat([aws_gyeongsang, aws_gyeongsang2]).sort_values('지점').reset_index(drop = True)\n",
    "\n",
    "# 제주\n",
    "aws_jeju = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_제주.csv', encoding='cp949')\n",
    "aws_jeju.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_jeju.loc[:, '도시'] = '제주'\n",
    "aws_jeju = aws_jeju[['지점', '도시']]\n",
    "\n",
    "aws_jeju2 = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_제주.csv', encoding='cp949')\n",
    "aws_jeju2.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "aws_jeju2.loc[:, '도시'] = '제주'\n",
    "aws_jeju2 = aws_jeju2[['지점', '도시']]\n",
    "\n",
    "aws_jeju_combined = pd.concat([aws_jeju, aws_jeju2]).sort_values('지점').reset_index(drop=True)\n",
    "\n",
    "\n",
    "aws_list = [aws_seoul_combined, aws_busan_combined, aws_daegu_combined, aws_incheon_combined, \n",
    "            aws_gwangju_combined, aws_daejeon_combined,aws_ulsan_combined, aws_sejong_combined, \n",
    "            aws_gyeonggi_combined, aws_gangwon_combined, aws_chungcheong_combined, aws_jeolla_combined,\n",
    "            aws_gyeongsang_combined, aws_jeju_combined]\n",
    "\n",
    "aws_combined = pd.concat(aws_list, ignore_index=True)\n",
    "\n",
    "merged_df_train = pd.merge(train, aws_combined, how='left', left_on='stn', right_on='지점')\n",
    "merged_df_test = pd.merge(test, aws_combined, how='left', left_on='stn', right_on='지점')\n",
    "\n",
    "train['도시'] = merged_df_train['도시']\n",
    "test['도시'] = merged_df_test['도시']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e0ac182-dd4d-483c-b6ba-206afa1c0936",
   "metadata": {},
   "source": [
    "위에서 매핑 안된 지점들을 수동으로 찾아서 매핑"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2cb14fed-dd63-4e98-934b-755e120a54f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 수동으로 매핑\n",
    "\n",
    "missing_stn_train_after_merge = train[train['도시'].isna()]['stn'].unique()\n",
    "missing_stn_test_after_merge = test[test['도시'].isna()]['stn'].unique()\n",
    "\n",
    "for i in missing_stn_train_after_merge:\n",
    "    # 매핑할 도시 값을 가져오기\n",
    "    city_value = aws_combined[aws_combined['지점'] == i]['도시'].values\n",
    "    if len(city_value) > 0:  # 매핑할 도시 값이 존재하는 경우\n",
    "        train.loc[train['stn'] == i, '도시'] = city_value[0]\n",
    "\n",
    "for i in missing_stn_test_after_merge:\n",
    "    # 매핑할 도시 값을 가져오기\n",
    "    city_value = aws_combined[aws_combined['지점'] == i]['도시'].values\n",
    "    if len(city_value) > 0:  # 매핑할 도시 값이 존재하는 경우\n",
    "        test.loc[train['stn'] == i, '도시'] = city_value[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6db4d630-3cef-4295-926a-ac30a86dcf3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_null_value = train[train['도시'].isnull()]['stn'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a594989b-7eaa-49e8-9c12-4b9fe1a3592b",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_null_value = test[test['도시'].isnull()]['stn'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c18daefe-0d02-4174-97e7-5907435942d1",
   "metadata": {},
   "source": [
    "aws 지점 파일 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3242c485-2002-4c2d-b0ae-09f231396717",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ## AWS 데이터 전처리\n",
    "# meta 출처 : 기상청 기상자료개방포털 - 데이터 - 메타데이터 - 관측지점정보 - 방재기상관측\n",
    "aws = pd.read_csv('/Users/jangjuik/Desktop/electric/code/방재기상관측_AWS_지점.csv', encoding='cp949', index_col=0)\n",
    "\n",
    "aws_meta = pd.read_csv('/Users/jangjuik/Desktop/electric/code/META_관측지점정보_20240612131304.csv', encoding='cp949')\n",
    "aws_meta.drop_duplicates(subset='지점', keep='first', inplace=True, ignore_index=True)\n",
    "\n",
    "aws = aws[['지점번호', '지점명(한글)', '위도(degree)', '경도(degree)']]\n",
    "aws_meta = aws_meta[['지점', '지점명', '위도', '경도']]\n",
    "\n",
    "aws = aws.rename(columns={'지점번호': 'stn','지점명(한글)': 'stn_nm','위도(degree)': 'lon','경도(degree)': 'lat'})\n",
    "aws_meta = aws_meta.rename(columns={'지점': 'stn','지점명': 'stn_nm','위도': 'lon','경도': 'lat'})\n",
    "\n",
    "# aws 데이터는 692개\n",
    "# aws_meta 데이터는 549개\n",
    "aws_df = pd.concat([aws, aws_meta], axis=0).drop_duplicates(subset='stn', keep='first', ignore_index=True)\n",
    "\n",
    "# GeoDataFrame 변환\n",
    "aws_df = gpd.GeoDataFrame( \\\n",
    "            aws_df, \\\n",
    "            geometry=gpd.points_from_xy( \\\n",
    "                                        aws_df[\"lon\"], \\\n",
    "                                        aws_df[\"lat\"]\\\n",
    "                                       ),\\\n",
    "            crs=\"EPSG:4326\"\\\n",
    "        ).drop(columns=[\"lat\", 'lon'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1f4e1f16-d508-4cd8-9ad3-8f74977ca317",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     stn stn_nm                    geometry\n",
      "522  788     풍암  POINT (35.13434 126.87709)\n",
      "     stn stn_nm                    geometry\n",
      "446  708     광산  POINT (35.12886 126.74525)\n",
      "     stn stn_nm                    geometry\n",
      "459  722    조선대  POINT (35.13684 126.92875)\n",
      "     stn stn_nm                    geometry\n",
      "517  783    과기원  POINT (35.23026 126.84076)\n",
      "     stn stn_nm                    geometry\n",
      "224  472     포승  POINT (36.98448 126.85349)\n",
      "     stn stn_nm                    geometry\n",
      "141  358    현덕면  POINT (36.96720 126.92140)\n",
      "     stn stn_nm                    geometry\n",
      "223  471     송탄  POINT (37.06644 127.06490)\n",
      "     stn stn_nm                    geometry\n",
      "184  432     인계  POINT (37.25511 127.03786)\n",
      "     stn stn_nm                    geometry\n",
      "188  436     역삼  POINT (37.23139 127.18928)\n",
      "     stn stn_nm                    geometry\n",
      "182  430     경기  POINT (37.27183 127.01183)\n",
      "     stn stn_nm                    geometry\n",
      "145  364    분당구  POINT (37.38280 127.11890)\n",
      "     stn stn_nm                    geometry\n",
      "211  459     오포  POINT (37.34548 127.19676)\n",
      "     stn stn_nm                    geometry\n",
      "136  353    덕정동  POINT (37.84140 127.06830)\n"
     ]
    }
   ],
   "source": [
    "for i in train_null_value:\n",
    "    for j in aws_df['stn']:\n",
    "        if i == j:\n",
    "            print(aws_df[aws_df['stn'] == j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "839b4ed7-be15-4baa-be30-2e001f6c4425",
   "metadata": {},
   "outputs": [],
   "source": [
    "stn_to_city = {\n",
    "    788: '광주', 708: '광주', 722: '광주', 783: '광주', 472: '제주',\n",
    "    358: '제주', 471: '경기', 432: '경기', 436: '경기', 430: '경기',\n",
    "    364: '경기', 459: '경기', 353: '경기'\n",
    "}\n",
    "\n",
    "# train 데이터프레임에 도시명 추가\n",
    "train['대분류_도시'] = train['stn'].map(stn_to_city)\n",
    "train['도시'] = train['도시'].fillna(train['대분류_도시'])\n",
    "train.drop(columns=['대분류_도시'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8a01ca5b-467f-4521-a8eb-108dcbb7b080",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    stn stn_nm                    geometry\n",
      "15  113  인천(공)  POINT (37.46250 126.43920)\n",
      "    stn stn_nm                    geometry\n",
      "50  182  제주(공)  POINT (33.51667 126.50000)\n",
      "    stn stn_nm                    geometry\n",
      "30  140     군산  POINT (36.00530 126.76135)\n",
      "     stn stn_nm                    geometry\n",
      "187  435     고잔  POINT (37.32431 126.82119)\n",
      "     stn stn_nm                    geometry\n",
      "202  450     주교  POINT (37.65550 126.83336)\n",
      "   stn stn_nm                    geometry\n",
      "5   99     파주  POINT (37.88588 126.76649)\n",
      "     stn stn_nm                    geometry\n",
      "517  783    과기원  POINT (35.23026 126.84076)\n",
      "    stn stn_nm                    geometry\n",
      "72  245     정읍  POINT (35.56317 126.86611)\n",
      "     stn stn_nm                    geometry\n",
      "295  545     안산  POINT (37.28036 126.83873)\n",
      "     stn stn_nm                    geometry\n",
      "162  405     양천  POINT (37.52961 126.87819)\n",
      "     stn stn_nm                    geometry\n",
      "161  404     강서  POINT (37.54992 126.84253)\n",
      "     stn stn_nm                    geometry\n",
      "290  540     고양  POINT (37.63430 126.89170)\n",
      "     stn stn_nm                    geometry\n",
      "522  788     풍암  POINT (35.13434 126.87709)\n",
      "     stn stn_nm                    geometry\n",
      "259  509     관악  POINT (37.45284 126.95014)\n",
      "     stn stn_nm                    geometry\n",
      "167  410    기상청  POINT (37.49371 126.91809)\n",
      "     stn stn_nm                    geometry\n",
      "175  418     한강  POINT (37.52490 126.93906)\n",
      "     stn stn_nm                    geometry\n",
      "173  416     은평  POINT (37.64440 126.94530)\n",
      "     stn stn_nm                    geometry\n",
      "459  722    조선대  POINT (35.13684 126.92875)\n",
      "    stn stn_nm                    geometry\n",
      "36  156     광주  POINT (35.17294 126.89158)\n",
      "     stn stn_nm                    geometry\n",
      "706  493     송악  POINT (36.73620 127.00810)\n",
      "     stn stn_nm                    geometry\n",
      "300  550     오산  POINT (37.18800 127.04870)\n",
      "     stn stn_nm                    geometry\n",
      "191  439     진안  POINT (37.20606 127.03778)\n",
      "     stn stn_nm                    geometry\n",
      "180  424     강북  POINT (37.63970 127.02572)\n",
      "     stn stn_nm                    geometry\n",
      "282  532    의정부  POINT (37.73500 127.07500)\n",
      "     stn stn_nm                    geometry\n",
      "154  373     남방  POINT (37.77060 127.04580)\n",
      "     stn stn_nm                    geometry\n",
      "136  353    덕정동  POINT (37.84140 127.06830)\n",
      "   stn stn_nm                    geometry\n",
      "4   98    동두천  POINT (37.90186 127.06069)\n",
      "     stn stn_nm                    geometry\n",
      "198  446     남촌  POINT (37.13739 127.06578)\n",
      "     stn stn_nm                    geometry\n",
      "598  864     완산  POINT (35.82150 127.15496)\n",
      "    stn stn_nm                    geometry\n",
      "32  146     전주  POINT (35.84080 127.11720)\n",
      "     stn stn_nm                    geometry\n",
      "211  459     오포  POINT (37.34548 127.19676)\n",
      "     stn stn_nm                    geometry\n",
      "145  364    분당구  POINT (37.38280 127.11890)\n",
      "     stn stn_nm                    geometry\n",
      "196  444     하남  POINT (37.53592 127.21556)\n",
      "     stn stn_nm                    geometry\n",
      "291  541    남양주  POINT (37.65280 127.14930)\n",
      "     stn stn_nm                    geometry\n",
      "203  451     오남  POINT (37.61069 127.15297)\n",
      "     stn stn_nm                    geometry\n",
      "236  484     창현  POINT (37.64657 127.31648)\n",
      "     stn stn_nm                    geometry\n",
      "246  496   세종금남  POINT (36.45850 127.26880)\n",
      "     stn stn_nm                    geometry\n",
      "359  611   세종연서  POINT (36.56650 127.27970)\n",
      "    stn stn_nm                    geometry\n",
      "25  133     대전  POINT (36.37200 127.37212)\n",
      "    stn stn_nm                    geometry\n",
      "73  247     남원  POINT (35.40230 127.39670)\n",
      "     stn stn_nm                    geometry\n",
      "389  642     문화  POINT (36.31050 127.40608)\n",
      "    stn stn_nm                    geometry\n",
      "96  279     구미  POINT (36.13055 128.32054)\n",
      "     stn stn_nm                    geometry\n",
      "101  288     밀양  POINT (35.49148 128.74410)\n",
      "     stn stn_nm                    geometry\n",
      "561  827     경산  POINT (35.82420 128.74280)\n",
      "    stn stn_nm                    geometry\n",
      "77  253    김해시  POINT (35.22666 128.89301)\n"
     ]
    }
   ],
   "source": [
    "for i in test_null_value:\n",
    "    for j in aws_df['stn']:\n",
    "        if i == j:\n",
    "            print(aws_df[aws_df['stn'] == j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8b4d42a4-57e3-454c-9f71-f2e540235b89",
   "metadata": {},
   "outputs": [],
   "source": [
    "stn_to_city_large = {\n",
    "    113: '인천', 182: '제주', 140: '전라', 435: '경기', 450: '경기',\n",
    "    99: '경기', 783: '광주', 245: '전라', 545: '경기', 405: '서울',\n",
    "    404: '서울', 540: '경기', 788: '광주', 509: '서울', 410: '서울',\n",
    "    418: '서울', 416: '서울', 722: '광주', 493: '경기', 550: '경기',\n",
    "    439: '경기', 424: '서울', 532: '서울', 373: '서울', 353: '경기',\n",
    "    98: '경기', 446: '경기', 864: '전라', 146: '전라', 722: '광주',\n",
    "    156: '광주', 493: '경기', 550: '경기', 439: '경기', 451: '경기',\n",
    "    484: '경기', 496: '세종', 611: '세종', 133: '대전', 247: '전라',\n",
    "    642: '충청', 279: '경상', 288: '경상', 827: '경상', 253: '경상', 541 : '경기'\n",
    "}\n",
    "\n",
    "# test 데이터프레임에 대분류 도시명 추가\n",
    "test['대분류_도시'] = test['stn'].map(stn_to_city_large)\n",
    "test['도시'] = test['도시'].fillna(test['대분류_도시'])\n",
    "test.drop(columns=['대분류_도시'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "eacafb8b-7e4c-47d1-92e3-e1f0b31360e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 불필요한 변수 삭제\n",
    "train.drop(['tm','num', 'n','sum_qctr', 'sum_load', 'n_mean_load'],axis = 1, inplace = True)\n",
    "test.drop(['tm','num'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c7b5b187-462a-46e3-abeb-b233d899ad40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sampled_df = train.drop(['도시'], axis = 1)\n",
    "sampled_df = sampled_df.sample(10000, random_state= 42)\n",
    "\n",
    "plt.figure(figsize = (15 , 10))\n",
    "sns.heatmap(sampled_df.corr(), annot = True, fmt = '.2f')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b09470d1-4ad7-4881-9140-ff98ee4fb136",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 최종적으로 삭제\n",
    "train.drop(['hh24', 'Month', 'week_name'],axis = 1, inplace = True)\n",
    "test.drop(['hh24',  'Month', 'week_name'], axis = 1, inplace = True)\n",
    "\n",
    "# hh24 , Month 변수는 사인, 코사인 함수로 변환했기 때문에 삭제하고, week_name 변수는 모델에 아무런 영향이 없어서 삭제"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec3fd241-c0a4-438f-9e5b-d7c5b0205686",
   "metadata": {},
   "source": [
    "# 모델링"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d04572b8-269d-4c16-a599-9e23d307e309",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = train['elec']\n",
    "X = train.drop(['elec'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0380980-e222-4bcd-a422-fc41197abb2e",
   "metadata": {},
   "source": [
    "더미 변수화를 이용해 범주형 변수를 처리하였고,<br>\n",
    "2020년 ~ 2021년 2년 간 데이터를 학습해 2022년을 예측해서 모델 성능을 검증했다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "374fcb85-7efb-4b75-bec4-19330395de61",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_encoded = pd.get_dummies(X, columns=['도시'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dd5dc81c-0e4c-4b5b-b922-76e0bab02078",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### 2020 ~ 2021년을 학습시켜 2022년 예측\n",
    "\n",
    "train_index = X_encoded[(X_encoded['Year'] >= 2020) & (X_encoded['Year'] <= 2021)].index\n",
    "test_index = X_encoded[(X_encoded['Year'] >= 2022) & (X_encoded['Year'] <= 2023)].index\n",
    "\n",
    "train_X_encoded = X_encoded.loc[train_index]\n",
    "train_Y_encoded = Y.loc[train_index]\n",
    "\n",
    "test_X_encoded = X_encoded.loc[test_index]\n",
    "test_Y_encoded = Y.loc[test_index]\n",
    "\n",
    "# 이동평균, 표준편차 다시 설정\n",
    "train_X_encoded['temperature_7d_ma'] = train_X_encoded['nph_ta_chi'].rolling(window = 168, min_periods= 1).mean()\n",
    "test_X_encoded['temperature_7d_ma'] = test_X_encoded['nph_ta_chi'].rolling(window = 168, min_periods= 1).mean()\n",
    "\n",
    "train_X_encoded['humidity_7d_ma'] = train_X_encoded['nph_hm'].rolling(window = 168, min_periods= 1).mean()\n",
    "test_X_encoded['humidity_7d_ma'] = test_X_encoded['nph_hm'].rolling(window = 168, min_periods= 1).mean()\n",
    "\n",
    "train_X_encoded['precipitation_7d_ma'] = train_X_encoded['nph_rn_60m'].rolling(window = 168, min_periods= 1).mean()\n",
    "test_X_encoded['precipitation_7d_ma'] = test_X_encoded['nph_rn_60m'].rolling(window = 168, min_periods= 1).mean()\n",
    "\n",
    "train_X_encoded['temperature_7d_std'] = train_X_encoded['nph_ta_chi'].rolling(window = 168, min_periods= 1).std()\n",
    "test_X_encoded['temperature_7d_std'] = test_X_encoded['nph_ta_chi'].rolling(window = 168, min_periods = 1).std()\n",
    "\n",
    "train_X_encoded['humidity_7d_std'] = train_X_encoded['nph_hm'].rolling(window = 168, min_periods= 1).std()\n",
    "test_X_encoded['humidity_7d_std'] = test_X_encoded['nph_hm'].rolling(window = 168, min_periods = 1).std()\n",
    "\n",
    "train_X_encoded['precipitation_7d_std'] = train_X_encoded['nph_rn_60m'].rolling(window = 168, min_periods= 1).std()\n",
    "test_X_encoded['precipitation_7d_std'] = test_X_encoded['nph_rn_60m'].rolling(window = 168, min_periods= 1).std()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65e1679b-b54d-4fbb-9c3f-3cb04192e509",
   "metadata": {},
   "source": [
    "## Optuna로 최적 파라미터 탐색 (XGBoost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "6933af80-4a9c-4608-8ae3-b77007c74097",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-06-25 22:00:36,773] A new study created in memory with name: no-name-ff406ab3-3889-4ad1-9d80-b0a31f56dc99\n",
      "[I 2024-06-25 22:04:50,753] Trial 0 finished with value: 0.973675284835049 and parameters: {'max_depth': 8, 'learning_rate': 0.0059374370665740495, 'n_estimators': 958, 'min_child_weight': 4, 'gamma': 0.006551620208777817, 'subsample': 0.8256862445663526, 'colsample_bytree': 0.8296677981867726}. Best is trial 0 with value: 0.973675284835049.\n",
      "[I 2024-06-25 22:09:48,094] Trial 1 finished with value: 0.9644458375258669 and parameters: {'max_depth': 9, 'learning_rate': 0.0021864612539518762, 'n_estimators': 984, 'min_child_weight': 8, 'gamma': 9.030519522658303e-08, 'subsample': 0.8091689335805101, 'colsample_bytree': 0.7286397944297693}. Best is trial 0 with value: 0.973675284835049.\n",
      "[I 2024-06-25 22:21:26,020] Trial 2 finished with value: 0.9757591584977056 and parameters: {'max_depth': 8, 'learning_rate': 0.029029886291408697, 'n_estimators': 834, 'min_child_weight': 4, 'gamma': 0.0006867845383801374, 'subsample': 0.7279027556569324, 'colsample_bytree': 0.5109799234563792}. Best is trial 2 with value: 0.9757591584977056.\n",
      "[I 2024-06-25 22:25:19,151] Trial 3 finished with value: 0.9695728138698775 and parameters: {'max_depth': 8, 'learning_rate': 0.004024105245852502, 'n_estimators': 925, 'min_child_weight': 7, 'gamma': 3.94009916451471e-05, 'subsample': 0.9665224759461734, 'colsample_bytree': 0.7264663174465296}. Best is trial 2 with value: 0.9757591584977056.\n",
      "[I 2024-06-25 22:28:05,965] Trial 4 finished with value: 0.9767010697751349 and parameters: {'max_depth': 7, 'learning_rate': 0.05252441161307237, 'n_estimators': 889, 'min_child_weight': 10, 'gamma': 0.021219443211864454, 'subsample': 0.9259000795470325, 'colsample_bytree': 0.9736480989220306}. Best is trial 4 with value: 0.9767010697751349.\n",
      "[I 2024-06-25 22:32:25,931] Trial 5 finished with value: 0.9770437244327511 and parameters: {'max_depth': 9, 'learning_rate': 0.06370618662158958, 'n_estimators': 853, 'min_child_weight': 5, 'gamma': 5.38858533817894e-08, 'subsample': 0.7966856815127475, 'colsample_bytree': 0.9958786749721944}. Best is trial 5 with value: 0.9770437244327511.\n",
      "[I 2024-06-25 22:36:43,430] Trial 6 finished with value: 0.973972093509783 and parameters: {'max_depth': 8, 'learning_rate': 0.008898935301868794, 'n_estimators': 707, 'min_child_weight': 9, 'gamma': 2.5648765575469883e-05, 'subsample': 0.9762265116526223, 'colsample_bytree': 0.8294987722960955}. Best is trial 5 with value: 0.9770437244327511.\n",
      "Exception ignored on calling ctypes callback function: <bound method DataIter._next_wrapper of <xgboost.data.SingleBatchInternalIter object at 0x28124be10>>\n",
      "Traceback (most recent call last):\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 641, in _next_wrapper\n",
      "    return self._handle_exception(lambda: self.next(input_data), 0)\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 557, in _handle_exception\n",
      "    return fn()\n",
      "           ^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 641, in <lambda>\n",
      "    return self._handle_exception(lambda: self.next(input_data), 0)\n",
      "                                          ^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/data.py\", line 1280, in next\n",
      "    input_data(**self.kwargs)\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 730, in inner_f\n",
      "    return func(**kwargs)\n",
      "           ^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 624, in input_data\n",
      "    new, cat_codes, feature_names, feature_types = _proxy_transform(\n",
      "                                                   ^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/data.py\", line 1315, in _proxy_transform\n",
      "    arr, feature_names, feature_types = _transform_pandas_df(\n",
      "                                        ^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/data.py\", line 508, in _transform_pandas_df\n",
      "    arr: np.ndarray = transformed.values\n",
      "                      ^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/pandas/core/frame.py\", line 12281, in values\n",
      "    return self._mgr.as_array()\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/pandas/core/internals/managers.py\", line 1656, in as_array\n",
      "    arr = self._interleave(dtype=dtype, na_value=na_value)\n",
      "          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/pandas/core/internals/managers.py\", line 1689, in _interleave\n",
      "    result = np.empty(self.shape, dtype=dtype)\n",
      "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "KeyboardInterrupt: \n",
      "[W 2024-06-25 22:36:45,575] Trial 7 failed with parameters: {'max_depth': 7, 'learning_rate': 0.08276224664552513, 'n_estimators': 605, 'min_child_weight': 3, 'gamma': 6.115376032509943e-05, 'subsample': 0.7705401715060053, 'colsample_bytree': 0.7953061501521157} because of the following error: XGBoostError('[22:36:45] /var/folders/nz/j6p8yfhx1mv_0grj5xl4650h0000gp/T/abs_b6b50u1t0e/croot/xgboost-split_1713972723244/work/cpp_src/src/data/proxy_dmatrix.h:158: Unknown type: v\\nStack trace:\\n  [bt] (0) 1   libxgboost.dylib                    0x000000013f5b92e4 dmlc::LogMessageFatal::~LogMessageFatal() + 124\\n  [bt] (1) 2   libxgboost.dylib                    0x000000013f6b3d64 xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>)::$_1::operator()() const + 1028\\n  [bt] (2) 3   libxgboost.dylib                    0x000000013f6b013c xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>) + 464\\n  [bt] (3) 4   libxgboost.dylib                    0x000000013f6afb00 xgboost::data::IterativeDMatrix::IterativeDMatrix(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 1064\\n  [bt] (4) 5   libxgboost.dylib                    0x000000013f66a44c xgboost::DMatrix* xgboost::DMatrix::Create<void*, void*, void (void*), int (void*)>(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 156\\n  [bt] (5) 6   libxgboost.dylib                    0x000000013f5c3c5c XGQuantileDMatrixCreateFromCallback + 512\\n  [bt] (6) 7   libffi.8.dylib                      0x000000010561404c ffi_call_SYSV + 76\\n  [bt] (7) 8   libffi.8.dylib                      0x0000000105611834 ffi_call_int + 1404\\n  [bt] (8) 9   _ctypes.cpython-311-darwin.so       0x00000001056d4148 _ctypes_callproc + 752\\n\\n').\n",
      "Traceback (most recent call last):\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py\", line 196, in _run_trial\n",
      "    value_or_values = func(trial)\n",
      "                      ^^^^^^^^^^^\n",
      "  File \"/var/folders/6q/v2258sfj5m90mx5dzcytg6v40000gn/T/ipykernel_25095/3037329531.py\", line 17, in objective\n",
      "    model.fit(train_X_encoded, train_Y_encoded)\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 730, in inner_f\n",
      "    return func(**kwargs)\n",
      "           ^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/sklearn.py\", line 1055, in fit\n",
      "    train_dmatrix, evals = _wrap_evaluation_matrices(\n",
      "                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/sklearn.py\", line 521, in _wrap_evaluation_matrices\n",
      "    train_dmatrix = create_dmatrix(\n",
      "                    ^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/sklearn.py\", line 958, in _create_dmatrix\n",
      "    return QuantileDMatrix(\n",
      "           ^^^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 730, in inner_f\n",
      "    return func(**kwargs)\n",
      "           ^^^^^^^^^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 1529, in __init__\n",
      "    self._init(\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 1590, in _init\n",
      "    _check_call(ret)\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py\", line 282, in _check_call\n",
      "    raise XGBoostError(py_str(_LIB.XGBGetLastError()))\n",
      "xgboost.core.XGBoostError: [22:36:45] /var/folders/nz/j6p8yfhx1mv_0grj5xl4650h0000gp/T/abs_b6b50u1t0e/croot/xgboost-split_1713972723244/work/cpp_src/src/data/proxy_dmatrix.h:158: Unknown type: v\n",
      "Stack trace:\n",
      "  [bt] (0) 1   libxgboost.dylib                    0x000000013f5b92e4 dmlc::LogMessageFatal::~LogMessageFatal() + 124\n",
      "  [bt] (1) 2   libxgboost.dylib                    0x000000013f6b3d64 xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>)::$_1::operator()() const + 1028\n",
      "  [bt] (2) 3   libxgboost.dylib                    0x000000013f6b013c xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>) + 464\n",
      "  [bt] (3) 4   libxgboost.dylib                    0x000000013f6afb00 xgboost::data::IterativeDMatrix::IterativeDMatrix(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 1064\n",
      "  [bt] (4) 5   libxgboost.dylib                    0x000000013f66a44c xgboost::DMatrix* xgboost::DMatrix::Create<void*, void*, void (void*), int (void*)>(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 156\n",
      "  [bt] (5) 6   libxgboost.dylib                    0x000000013f5c3c5c XGQuantileDMatrixCreateFromCallback + 512\n",
      "  [bt] (6) 7   libffi.8.dylib                      0x000000010561404c ffi_call_SYSV + 76\n",
      "  [bt] (7) 8   libffi.8.dylib                      0x0000000105611834 ffi_call_int + 1404\n",
      "  [bt] (8) 9   _ctypes.cpython-311-darwin.so       0x00000001056d4148 _ctypes_callproc + 752\n",
      "\n",
      "\n",
      "[W 2024-06-25 22:36:45,578] Trial 7 failed with value None.\n"
     ]
    },
    {
     "ename": "XGBoostError",
     "evalue": "[22:36:45] /var/folders/nz/j6p8yfhx1mv_0grj5xl4650h0000gp/T/abs_b6b50u1t0e/croot/xgboost-split_1713972723244/work/cpp_src/src/data/proxy_dmatrix.h:158: Unknown type: v\nStack trace:\n  [bt] (0) 1   libxgboost.dylib                    0x000000013f5b92e4 dmlc::LogMessageFatal::~LogMessageFatal() + 124\n  [bt] (1) 2   libxgboost.dylib                    0x000000013f6b3d64 xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>)::$_1::operator()() const + 1028\n  [bt] (2) 3   libxgboost.dylib                    0x000000013f6b013c xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>) + 464\n  [bt] (3) 4   libxgboost.dylib                    0x000000013f6afb00 xgboost::data::IterativeDMatrix::IterativeDMatrix(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 1064\n  [bt] (4) 5   libxgboost.dylib                    0x000000013f66a44c xgboost::DMatrix* xgboost::DMatrix::Create<void*, void*, void (void*), int (void*)>(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 156\n  [bt] (5) 6   libxgboost.dylib                    0x000000013f5c3c5c XGQuantileDMatrixCreateFromCallback + 512\n  [bt] (6) 7   libffi.8.dylib                      0x000000010561404c ffi_call_SYSV + 76\n  [bt] (7) 8   libffi.8.dylib                      0x0000000105611834 ffi_call_int + 1404\n  [bt] (8) 9   _ctypes.cpython-311-darwin.so       0x00000001056d4148 _ctypes_callproc + 752\n\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mXGBoostError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[48], line 24\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;66;03m# Optuna study 생성 및 최적화 실행\u001b[39;00m\n\u001b[1;32m     23\u001b[0m study \u001b[38;5;241m=\u001b[39m optuna\u001b[38;5;241m.\u001b[39mcreate_study(direction\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmaximize\u001b[39m\u001b[38;5;124m'\u001b[39m, sampler\u001b[38;5;241m=\u001b[39mTPESampler())\n\u001b[0;32m---> 24\u001b[0m study\u001b[38;5;241m.\u001b[39moptimize(objective, n_trials\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m)\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBest hyperparameters: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mstudy\u001b[38;5;241m.\u001b[39mbest_params\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/study.py:451\u001b[0m, in \u001b[0;36mStudy.optimize\u001b[0;34m(self, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m    348\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21moptimize\u001b[39m(\n\u001b[1;32m    349\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    350\u001b[0m     func: ObjectiveFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    357\u001b[0m     show_progress_bar: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    358\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    359\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Optimize an objective function.\u001b[39;00m\n\u001b[1;32m    360\u001b[0m \n\u001b[1;32m    361\u001b[0m \u001b[38;5;124;03m    Optimization is done by choosing a suitable set of hyperparameter values from a given\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    449\u001b[0m \u001b[38;5;124;03m            If nested invocation of this method occurs.\u001b[39;00m\n\u001b[1;32m    450\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 451\u001b[0m     _optimize(\n\u001b[1;32m    452\u001b[0m         study\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    453\u001b[0m         func\u001b[38;5;241m=\u001b[39mfunc,\n\u001b[1;32m    454\u001b[0m         n_trials\u001b[38;5;241m=\u001b[39mn_trials,\n\u001b[1;32m    455\u001b[0m         timeout\u001b[38;5;241m=\u001b[39mtimeout,\n\u001b[1;32m    456\u001b[0m         n_jobs\u001b[38;5;241m=\u001b[39mn_jobs,\n\u001b[1;32m    457\u001b[0m         catch\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mtuple\u001b[39m(catch) \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(catch, Iterable) \u001b[38;5;28;01melse\u001b[39;00m (catch,),\n\u001b[1;32m    458\u001b[0m         callbacks\u001b[38;5;241m=\u001b[39mcallbacks,\n\u001b[1;32m    459\u001b[0m         gc_after_trial\u001b[38;5;241m=\u001b[39mgc_after_trial,\n\u001b[1;32m    460\u001b[0m         show_progress_bar\u001b[38;5;241m=\u001b[39mshow_progress_bar,\n\u001b[1;32m    461\u001b[0m     )\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:62\u001b[0m, in \u001b[0;36m_optimize\u001b[0;34m(study, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m---> 62\u001b[0m         _optimize_sequential(\n\u001b[1;32m     63\u001b[0m             study,\n\u001b[1;32m     64\u001b[0m             func,\n\u001b[1;32m     65\u001b[0m             n_trials,\n\u001b[1;32m     66\u001b[0m             timeout,\n\u001b[1;32m     67\u001b[0m             catch,\n\u001b[1;32m     68\u001b[0m             callbacks,\n\u001b[1;32m     69\u001b[0m             gc_after_trial,\n\u001b[1;32m     70\u001b[0m             reseed_sampler_rng\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m     71\u001b[0m             time_start\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     72\u001b[0m             progress_bar\u001b[38;5;241m=\u001b[39mprogress_bar,\n\u001b[1;32m     73\u001b[0m         )\n\u001b[1;32m     74\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     75\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m:\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:159\u001b[0m, in \u001b[0;36m_optimize_sequential\u001b[0;34m(study, func, n_trials, timeout, catch, callbacks, gc_after_trial, reseed_sampler_rng, time_start, progress_bar)\u001b[0m\n\u001b[1;32m    156\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 159\u001b[0m     frozen_trial \u001b[38;5;241m=\u001b[39m _run_trial(study, func, catch)\n\u001b[1;32m    160\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    161\u001b[0m     \u001b[38;5;66;03m# The following line mitigates memory problems that can be occurred in some\u001b[39;00m\n\u001b[1;32m    162\u001b[0m     \u001b[38;5;66;03m# environments (e.g., services that use computing containers such as GitHub Actions).\u001b[39;00m\n\u001b[1;32m    163\u001b[0m     \u001b[38;5;66;03m# Please refer to the following PR for further details:\u001b[39;00m\n\u001b[1;32m    164\u001b[0m     \u001b[38;5;66;03m# https://github.com/optuna/optuna/pull/325.\u001b[39;00m\n\u001b[1;32m    165\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m gc_after_trial:\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:247\u001b[0m, in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    240\u001b[0m         \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mShould not reach.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    242\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m    243\u001b[0m     frozen_trial\u001b[38;5;241m.\u001b[39mstate \u001b[38;5;241m==\u001b[39m TrialState\u001b[38;5;241m.\u001b[39mFAIL\n\u001b[1;32m    244\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m func_err \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    245\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(func_err, catch)\n\u001b[1;32m    246\u001b[0m ):\n\u001b[0;32m--> 247\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m func_err\n\u001b[1;32m    248\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m frozen_trial\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:196\u001b[0m, in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    194\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m get_heartbeat_thread(trial\u001b[38;5;241m.\u001b[39m_trial_id, study\u001b[38;5;241m.\u001b[39m_storage):\n\u001b[1;32m    195\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 196\u001b[0m         value_or_values \u001b[38;5;241m=\u001b[39m func(trial)\n\u001b[1;32m    197\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m exceptions\u001b[38;5;241m.\u001b[39mTrialPruned \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    198\u001b[0m         \u001b[38;5;66;03m# TODO(mamu): Handle multi-objective cases.\u001b[39;00m\n\u001b[1;32m    199\u001b[0m         state \u001b[38;5;241m=\u001b[39m TrialState\u001b[38;5;241m.\u001b[39mPRUNED\n",
      "Cell \u001b[0;32mIn[48], line 17\u001b[0m, in \u001b[0;36mobjective\u001b[0;34m(trial)\u001b[0m\n\u001b[1;32m      2\u001b[0m param \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mverbosity\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0\u001b[39m,\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mobjective\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mreg:squarederror\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtree_method\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhist\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m     14\u001b[0m }\n\u001b[1;32m     16\u001b[0m model \u001b[38;5;241m=\u001b[39m XGBRegressor(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparam)\n\u001b[0;32m---> 17\u001b[0m model\u001b[38;5;241m.\u001b[39mfit(train_X_encoded, train_Y_encoded)\n\u001b[1;32m     18\u001b[0m preds \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict(test_X_encoded)\n\u001b[1;32m     19\u001b[0m correlation \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mcorrcoef(preds, test_Y_encoded)[\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m]\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py:730\u001b[0m, in \u001b[0;36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args):\n\u001b[1;32m    729\u001b[0m     kwargs[k] \u001b[38;5;241m=\u001b[39m arg\n\u001b[0;32m--> 730\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/sklearn.py:1055\u001b[0m, in \u001b[0;36mXGBModel.fit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1053\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(verbosity\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbosity):\n\u001b[1;32m   1054\u001b[0m     evals_result: TrainingCallback\u001b[38;5;241m.\u001b[39mEvalsLog \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m-> 1055\u001b[0m     train_dmatrix, evals \u001b[38;5;241m=\u001b[39m _wrap_evaluation_matrices(\n\u001b[1;32m   1056\u001b[0m         missing\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmissing,\n\u001b[1;32m   1057\u001b[0m         X\u001b[38;5;241m=\u001b[39mX,\n\u001b[1;32m   1058\u001b[0m         y\u001b[38;5;241m=\u001b[39my,\n\u001b[1;32m   1059\u001b[0m         group\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1060\u001b[0m         qid\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1061\u001b[0m         sample_weight\u001b[38;5;241m=\u001b[39msample_weight,\n\u001b[1;32m   1062\u001b[0m         base_margin\u001b[38;5;241m=\u001b[39mbase_margin,\n\u001b[1;32m   1063\u001b[0m         feature_weights\u001b[38;5;241m=\u001b[39mfeature_weights,\n\u001b[1;32m   1064\u001b[0m         eval_set\u001b[38;5;241m=\u001b[39meval_set,\n\u001b[1;32m   1065\u001b[0m         sample_weight_eval_set\u001b[38;5;241m=\u001b[39msample_weight_eval_set,\n\u001b[1;32m   1066\u001b[0m         base_margin_eval_set\u001b[38;5;241m=\u001b[39mbase_margin_eval_set,\n\u001b[1;32m   1067\u001b[0m         eval_group\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1068\u001b[0m         eval_qid\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1069\u001b[0m         create_dmatrix\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_create_dmatrix,\n\u001b[1;32m   1070\u001b[0m         enable_categorical\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39menable_categorical,\n\u001b[1;32m   1071\u001b[0m         feature_types\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_types,\n\u001b[1;32m   1072\u001b[0m     )\n\u001b[1;32m   1073\u001b[0m     params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_xgb_params()\n\u001b[1;32m   1075\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobjective):\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/sklearn.py:521\u001b[0m, in \u001b[0;36m_wrap_evaluation_matrices\u001b[0;34m(missing, X, y, group, qid, sample_weight, base_margin, feature_weights, eval_set, sample_weight_eval_set, base_margin_eval_set, eval_group, eval_qid, create_dmatrix, enable_categorical, feature_types)\u001b[0m\n\u001b[1;32m    501\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_wrap_evaluation_matrices\u001b[39m(\n\u001b[1;32m    502\u001b[0m     missing: \u001b[38;5;28mfloat\u001b[39m,\n\u001b[1;32m    503\u001b[0m     X: Any,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    517\u001b[0m     feature_types: Optional[FeatureTypes],\n\u001b[1;32m    518\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tuple[Any, List[Tuple[Any, \u001b[38;5;28mstr\u001b[39m]]]:\n\u001b[1;32m    519\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Convert array_like evaluation matrices into DMatrix.  Perform validation on the\u001b[39;00m\n\u001b[1;32m    520\u001b[0m \u001b[38;5;124;03m    way.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 521\u001b[0m     train_dmatrix \u001b[38;5;241m=\u001b[39m create_dmatrix(\n\u001b[1;32m    522\u001b[0m         data\u001b[38;5;241m=\u001b[39mX,\n\u001b[1;32m    523\u001b[0m         label\u001b[38;5;241m=\u001b[39my,\n\u001b[1;32m    524\u001b[0m         group\u001b[38;5;241m=\u001b[39mgroup,\n\u001b[1;32m    525\u001b[0m         qid\u001b[38;5;241m=\u001b[39mqid,\n\u001b[1;32m    526\u001b[0m         weight\u001b[38;5;241m=\u001b[39msample_weight,\n\u001b[1;32m    527\u001b[0m         base_margin\u001b[38;5;241m=\u001b[39mbase_margin,\n\u001b[1;32m    528\u001b[0m         feature_weights\u001b[38;5;241m=\u001b[39mfeature_weights,\n\u001b[1;32m    529\u001b[0m         missing\u001b[38;5;241m=\u001b[39mmissing,\n\u001b[1;32m    530\u001b[0m         enable_categorical\u001b[38;5;241m=\u001b[39menable_categorical,\n\u001b[1;32m    531\u001b[0m         feature_types\u001b[38;5;241m=\u001b[39mfeature_types,\n\u001b[1;32m    532\u001b[0m         ref\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    533\u001b[0m     )\n\u001b[1;32m    535\u001b[0m     n_validation \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m eval_set \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(eval_set)\n\u001b[1;32m    537\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvalidate_or_none\u001b[39m(meta: Optional[Sequence], name: \u001b[38;5;28mstr\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Sequence:\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/sklearn.py:958\u001b[0m, in \u001b[0;36mXGBModel._create_dmatrix\u001b[0;34m(self, ref, **kwargs)\u001b[0m\n\u001b[1;32m    956\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m _can_use_qdm(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtree_method) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbooster \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgblinear\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    957\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 958\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m QuantileDMatrix(\n\u001b[1;32m    959\u001b[0m             \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs, ref\u001b[38;5;241m=\u001b[39mref, nthread\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs, max_bin\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmax_bin\n\u001b[1;32m    960\u001b[0m         )\n\u001b[1;32m    961\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:  \u001b[38;5;66;03m# `QuantileDMatrix` supports lesser types than DMatrix\u001b[39;00m\n\u001b[1;32m    962\u001b[0m         \u001b[38;5;28;01mpass\u001b[39;00m\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py:730\u001b[0m, in \u001b[0;36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args):\n\u001b[1;32m    729\u001b[0m     kwargs[k] \u001b[38;5;241m=\u001b[39m arg\n\u001b[0;32m--> 730\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py:1529\u001b[0m, in \u001b[0;36mQuantileDMatrix.__init__\u001b[0;34m(self, data, label, weight, base_margin, missing, silent, feature_names, feature_types, nthread, max_bin, ref, group, qid, label_lower_bound, label_upper_bound, feature_weights, enable_categorical, data_split_mode)\u001b[0m\n\u001b[1;32m   1509\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28many\u001b[39m(\n\u001b[1;32m   1510\u001b[0m         info \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1511\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m info \u001b[38;5;129;01min\u001b[39;00m (\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1522\u001b[0m         )\n\u001b[1;32m   1523\u001b[0m     ):\n\u001b[1;32m   1524\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1525\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIf data iterator is used as input, data like label should be \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1526\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mspecified as batch argument.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1527\u001b[0m         )\n\u001b[0;32m-> 1529\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_init(\n\u001b[1;32m   1530\u001b[0m     data,\n\u001b[1;32m   1531\u001b[0m     ref\u001b[38;5;241m=\u001b[39mref,\n\u001b[1;32m   1532\u001b[0m     label\u001b[38;5;241m=\u001b[39mlabel,\n\u001b[1;32m   1533\u001b[0m     weight\u001b[38;5;241m=\u001b[39mweight,\n\u001b[1;32m   1534\u001b[0m     base_margin\u001b[38;5;241m=\u001b[39mbase_margin,\n\u001b[1;32m   1535\u001b[0m     group\u001b[38;5;241m=\u001b[39mgroup,\n\u001b[1;32m   1536\u001b[0m     qid\u001b[38;5;241m=\u001b[39mqid,\n\u001b[1;32m   1537\u001b[0m     label_lower_bound\u001b[38;5;241m=\u001b[39mlabel_lower_bound,\n\u001b[1;32m   1538\u001b[0m     label_upper_bound\u001b[38;5;241m=\u001b[39mlabel_upper_bound,\n\u001b[1;32m   1539\u001b[0m     feature_weights\u001b[38;5;241m=\u001b[39mfeature_weights,\n\u001b[1;32m   1540\u001b[0m     feature_names\u001b[38;5;241m=\u001b[39mfeature_names,\n\u001b[1;32m   1541\u001b[0m     feature_types\u001b[38;5;241m=\u001b[39mfeature_types,\n\u001b[1;32m   1542\u001b[0m     enable_categorical\u001b[38;5;241m=\u001b[39menable_categorical,\n\u001b[1;32m   1543\u001b[0m )\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py:1590\u001b[0m, in \u001b[0;36mQuantileDMatrix._init\u001b[0;34m(self, data, ref, enable_categorical, **meta)\u001b[0m\n\u001b[1;32m   1588\u001b[0m it\u001b[38;5;241m.\u001b[39mreraise()\n\u001b[1;32m   1589\u001b[0m \u001b[38;5;66;03m# delay check_call to throw intermediate exception first\u001b[39;00m\n\u001b[0;32m-> 1590\u001b[0m _check_call(ret)\n\u001b[1;32m   1591\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandle \u001b[38;5;241m=\u001b[39m handle\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/xgboost/core.py:282\u001b[0m, in \u001b[0;36m_check_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    271\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Check the return value of C API call\u001b[39;00m\n\u001b[1;32m    272\u001b[0m \n\u001b[1;32m    273\u001b[0m \u001b[38;5;124;03mThis function will raise exception when error occurs.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    279\u001b[0m \u001b[38;5;124;03m    return value from API calls\u001b[39;00m\n\u001b[1;32m    280\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    281\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ret \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m--> 282\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m XGBoostError(py_str(_LIB\u001b[38;5;241m.\u001b[39mXGBGetLastError()))\n",
      "\u001b[0;31mXGBoostError\u001b[0m: [22:36:45] /var/folders/nz/j6p8yfhx1mv_0grj5xl4650h0000gp/T/abs_b6b50u1t0e/croot/xgboost-split_1713972723244/work/cpp_src/src/data/proxy_dmatrix.h:158: Unknown type: v\nStack trace:\n  [bt] (0) 1   libxgboost.dylib                    0x000000013f5b92e4 dmlc::LogMessageFatal::~LogMessageFatal() + 124\n  [bt] (1) 2   libxgboost.dylib                    0x000000013f6b3d64 xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>)::$_1::operator()() const + 1028\n  [bt] (2) 3   libxgboost.dylib                    0x000000013f6b013c xgboost::data::IterativeDMatrix::InitFromCPU(xgboost::Context const*, xgboost::BatchParam const&, void*, float, std::__1::shared_ptr<xgboost::DMatrix>) + 464\n  [bt] (3) 4   libxgboost.dylib                    0x000000013f6afb00 xgboost::data::IterativeDMatrix::IterativeDMatrix(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 1064\n  [bt] (4) 5   libxgboost.dylib                    0x000000013f66a44c xgboost::DMatrix* xgboost::DMatrix::Create<void*, void*, void (void*), int (void*)>(void*, void*, std::__1::shared_ptr<xgboost::DMatrix>, void (*)(void*), int (*)(void*), float, int, int) + 156\n  [bt] (5) 6   libxgboost.dylib                    0x000000013f5c3c5c XGQuantileDMatrixCreateFromCallback + 512\n  [bt] (6) 7   libffi.8.dylib                      0x000000010561404c ffi_call_SYSV + 76\n  [bt] (7) 8   libffi.8.dylib                      0x0000000105611834 ffi_call_int + 1404\n  [bt] (8) 9   _ctypes.cpython-311-darwin.so       0x00000001056d4148 _ctypes_callproc + 752\n\n"
     ]
    }
   ],
   "source": [
    "def objective(trial: Trial):\n",
    "    param = {\n",
    "        'verbosity': 0,\n",
    "        'objective': 'reg:squarederror',\n",
    "        'booster': 'gbtree',\n",
    "        'max_depth': trial.suggest_int('max_depth', 7, 9),\n",
    "        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-3, 1e-1),\n",
    "        'n_estimators': trial.suggest_int('n_estimators', 600, 1000),\n",
    "        'min_child_weight': trial.suggest_int('min_child_weight', 3, 10),\n",
    "        'gamma': trial.suggest_loguniform('gamma', 1e-8, 1.0),\n",
    "        'subsample': trial.suggest_uniform('subsample', 0.5, 1.0),\n",
    "        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.5, 1.0),\n",
    "        'tree_method': 'hist'\n",
    "    }\n",
    "\n",
    "    model = XGBRegressor(**param)\n",
    "    model.fit(train_X_encoded, train_Y_encoded)\n",
    "    preds = model.predict(test_X_encoded)\n",
    "    correlation = np.corrcoef(preds, test_Y_encoded)[0, 1]\n",
    "    return correlation\n",
    "\n",
    "# Optuna study 생성 및 최적화 실행\n",
    "study = optuna.create_study(direction='maximize', sampler=TPESampler())\n",
    "study.optimize(objective, n_trials=10)\n",
    "\n",
    "\n",
    "print(f'Best hyperparameters: {study.best_params}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3021ae14-6ced-4ce5-99be-368c63fadb9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_params = {'max_depth': 8, \n",
    "                 'learning_rate': 0.05238232430002132, \n",
    "                 'n_estimators': 722, \n",
    "                 'min_child_weight': 7, \n",
    "                 'gamma': 0.2920192649599971, \n",
    "                 'subsample': 0.8520050417121335,  \n",
    "                 'colsample_bytree': 0.795550807109001} ### 성능 가장 좋음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5695d9d0-9b0e-4aa2-8d3a-27ce1cbe9957",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.977184045840163\n"
     ]
    }
   ],
   "source": [
    "XGBoost_model = XGBRegressor(**best_params, random_state = 42)\n",
    "XGBoost_model.fit(train_X_encoded, train_Y_encoded)\n",
    "pred_XGBoost = XGBoost_model.predict(test_X_encoded)\n",
    "\n",
    "cor_XGBoost = np.corrcoef(pred_XGBoost, test_Y_encoded)[0, 1]\n",
    "print(cor_XGBoost) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcee765d-8119-4219-8624-8e60a71d450e",
   "metadata": {},
   "source": [
    "## feature 중요도 탐색"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "22e03888-812b-4ab7-8aec-8d822be30103",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Feature  Importance\n",
      "10              sin_time    0.232636\n",
      "22                   CDD    0.223184\n",
      "11              cos_time    0.194025\n",
      "15     temperature_7d_ma    0.081889\n",
      "21              Heatwave    0.056543\n",
      "5             nph_ta_chi    0.042407\n",
      "9                 Season    0.040282\n",
      "6                weekday    0.016622\n",
      "13             cos_month    0.014105\n",
      "2                 nph_hm    0.013533\n",
      "14                   THI    0.005681\n",
      "12             sin_month    0.005412\n",
      "4             nph_rn_60m    0.005155\n",
      "7                   Year    0.004605\n",
      "8                    day    0.004230\n",
      "25                 도시_경상    0.004213\n",
      "34                 도시_전라    0.004115\n",
      "33                 도시_인천    0.003963\n",
      "1                 nph_ta    0.003768\n",
      "27                 도시_대구    0.003403\n",
      "24                 도시_경기    0.003290\n",
      "30                 도시_서울    0.003261\n",
      "32                 도시_울산    0.003169\n",
      "31                 도시_세종    0.003007\n",
      "23                 도시_강원    0.002898\n",
      "29                 도시_부산    0.002889\n",
      "18    temperature_7d_std    0.002767\n",
      "0                    stn    0.002746\n",
      "36                 도시_충청    0.002665\n",
      "26                 도시_광주    0.002334\n",
      "35                 도시_제주    0.002086\n",
      "17   precipitation_7d_ma    0.001927\n",
      "3             nph_ws_10m    0.001737\n",
      "28                 도시_대전    0.001683\n",
      "16        humidity_7d_ma    0.001655\n",
      "20  precipitation_7d_std    0.001391\n",
      "19       humidity_7d_std    0.000723\n"
     ]
    }
   ],
   "source": [
    "feature_importances = XGBoost_model.feature_importances_\n",
    "\n",
    "feature_names = train_X_encoded.columns\n",
    "\n",
    "feature_importance_df = pd.DataFrame({\n",
    "    'Feature': feature_names,\n",
    "    'Importance': feature_importances\n",
    "})\n",
    "\n",
    "feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n",
    "\n",
    "print(feature_importance_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5918e2a6-8a51-4a7a-9b1b-50642f95e559",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "top_10_features = feature_importance_df.head(10)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.barh(top_10_features['Feature'], top_10_features['Importance'], color='skyblue')\n",
    "plt.xlabel('Importance')\n",
    "plt.ylabel('Feature')\n",
    "plt.title('Top 10 Feature Importances')\n",
    "plt.gca().invert_yaxis() \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ecb4a0a-f4c9-4a89-9544-d3a8c2baa350",
   "metadata": {},
   "source": [
    "## Optuna로 최적 파라미터 탐색 (LGBM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2f5b6d74-32e6-4d6b-9d3e-945190f8a3b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-06-25 21:32:27,760] A new study created in memory with name: no-name-235cbdf4-e8b2-412d-b9f4-744d82f431ec\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Total Bins 3291\n",
      "[LightGBM] [Info] Number of data points in the train set: 5254138, number of used features: 37\n",
      "[LightGBM] [Info] Start training from score 99.998886\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[W 2024-06-25 21:32:55,308] Trial 0 failed with parameters: {'num_leaves': 898, 'max_depth': -1, 'learning_rate': 0.0005023322479377401, 'n_estimators': 630, 'reg_alpha': 0.00032718436591548243, 'reg_lambda': 0.00017730621646428835} because of the following error: KeyboardInterrupt().\n",
      "Traceback (most recent call last):\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py\", line 196, in _run_trial\n",
      "    value_or_values = func(trial)\n",
      "                      ^^^^^^^^^^^\n",
      "  File \"/var/folders/6q/v2258sfj5m90mx5dzcytg6v40000gn/T/ipykernel_25095/1505255194.py\", line 16, in objective\n",
      "    model.fit(train_X_encoded, train_Y_encoded, eval_set=[(test_X_encoded, test_Y_encoded)])\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/lightgbm/sklearn.py\", line 1092, in fit\n",
      "    super().fit(\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/lightgbm/sklearn.py\", line 885, in fit\n",
      "    self._Booster = train(\n",
      "                    ^^^^^^\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/lightgbm/engine.py\", line 276, in train\n",
      "    booster.update(fobj=fobj)\n",
      "  File \"/opt/anaconda3/lib/python3.11/site-packages/lightgbm/basic.py\", line 3891, in update\n",
      "    _safe_call(_LIB.LGBM_BoosterUpdateOneIter(\n",
      "               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "KeyboardInterrupt\n",
      "[W 2024-06-25 21:32:55,312] Trial 0 failed with value None.\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[41], line 22\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m cor\n\u001b[1;32m     21\u001b[0m study \u001b[38;5;241m=\u001b[39m optuna\u001b[38;5;241m.\u001b[39mcreate_study(direction\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmaximize\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 22\u001b[0m study\u001b[38;5;241m.\u001b[39moptimize(objective, n_trials\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m)\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBest trial:\u001b[39m\u001b[38;5;124m'\u001b[39m, study\u001b[38;5;241m.\u001b[39mbest_trial\u001b[38;5;241m.\u001b[39mparams)\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/study.py:451\u001b[0m, in \u001b[0;36mStudy.optimize\u001b[0;34m(self, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m    348\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21moptimize\u001b[39m(\n\u001b[1;32m    349\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    350\u001b[0m     func: ObjectiveFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    357\u001b[0m     show_progress_bar: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    358\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    359\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Optimize an objective function.\u001b[39;00m\n\u001b[1;32m    360\u001b[0m \n\u001b[1;32m    361\u001b[0m \u001b[38;5;124;03m    Optimization is done by choosing a suitable set of hyperparameter values from a given\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    449\u001b[0m \u001b[38;5;124;03m            If nested invocation of this method occurs.\u001b[39;00m\n\u001b[1;32m    450\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 451\u001b[0m     _optimize(\n\u001b[1;32m    452\u001b[0m         study\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    453\u001b[0m         func\u001b[38;5;241m=\u001b[39mfunc,\n\u001b[1;32m    454\u001b[0m         n_trials\u001b[38;5;241m=\u001b[39mn_trials,\n\u001b[1;32m    455\u001b[0m         timeout\u001b[38;5;241m=\u001b[39mtimeout,\n\u001b[1;32m    456\u001b[0m         n_jobs\u001b[38;5;241m=\u001b[39mn_jobs,\n\u001b[1;32m    457\u001b[0m         catch\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mtuple\u001b[39m(catch) \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(catch, Iterable) \u001b[38;5;28;01melse\u001b[39;00m (catch,),\n\u001b[1;32m    458\u001b[0m         callbacks\u001b[38;5;241m=\u001b[39mcallbacks,\n\u001b[1;32m    459\u001b[0m         gc_after_trial\u001b[38;5;241m=\u001b[39mgc_after_trial,\n\u001b[1;32m    460\u001b[0m         show_progress_bar\u001b[38;5;241m=\u001b[39mshow_progress_bar,\n\u001b[1;32m    461\u001b[0m     )\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:62\u001b[0m, in \u001b[0;36m_optimize\u001b[0;34m(study, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m---> 62\u001b[0m         _optimize_sequential(\n\u001b[1;32m     63\u001b[0m             study,\n\u001b[1;32m     64\u001b[0m             func,\n\u001b[1;32m     65\u001b[0m             n_trials,\n\u001b[1;32m     66\u001b[0m             timeout,\n\u001b[1;32m     67\u001b[0m             catch,\n\u001b[1;32m     68\u001b[0m             callbacks,\n\u001b[1;32m     69\u001b[0m             gc_after_trial,\n\u001b[1;32m     70\u001b[0m             reseed_sampler_rng\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m     71\u001b[0m             time_start\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     72\u001b[0m             progress_bar\u001b[38;5;241m=\u001b[39mprogress_bar,\n\u001b[1;32m     73\u001b[0m         )\n\u001b[1;32m     74\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     75\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m:\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:159\u001b[0m, in \u001b[0;36m_optimize_sequential\u001b[0;34m(study, func, n_trials, timeout, catch, callbacks, gc_after_trial, reseed_sampler_rng, time_start, progress_bar)\u001b[0m\n\u001b[1;32m    156\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 159\u001b[0m     frozen_trial \u001b[38;5;241m=\u001b[39m _run_trial(study, func, catch)\n\u001b[1;32m    160\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    161\u001b[0m     \u001b[38;5;66;03m# The following line mitigates memory problems that can be occurred in some\u001b[39;00m\n\u001b[1;32m    162\u001b[0m     \u001b[38;5;66;03m# environments (e.g., services that use computing containers such as GitHub Actions).\u001b[39;00m\n\u001b[1;32m    163\u001b[0m     \u001b[38;5;66;03m# Please refer to the following PR for further details:\u001b[39;00m\n\u001b[1;32m    164\u001b[0m     \u001b[38;5;66;03m# https://github.com/optuna/optuna/pull/325.\u001b[39;00m\n\u001b[1;32m    165\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m gc_after_trial:\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:247\u001b[0m, in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    240\u001b[0m         \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mShould not reach.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    242\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m    243\u001b[0m     frozen_trial\u001b[38;5;241m.\u001b[39mstate \u001b[38;5;241m==\u001b[39m TrialState\u001b[38;5;241m.\u001b[39mFAIL\n\u001b[1;32m    244\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m func_err \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    245\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(func_err, catch)\n\u001b[1;32m    246\u001b[0m ):\n\u001b[0;32m--> 247\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m func_err\n\u001b[1;32m    248\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m frozen_trial\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/optuna/study/_optimize.py:196\u001b[0m, in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    194\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m get_heartbeat_thread(trial\u001b[38;5;241m.\u001b[39m_trial_id, study\u001b[38;5;241m.\u001b[39m_storage):\n\u001b[1;32m    195\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 196\u001b[0m         value_or_values \u001b[38;5;241m=\u001b[39m func(trial)\n\u001b[1;32m    197\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m exceptions\u001b[38;5;241m.\u001b[39mTrialPruned \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    198\u001b[0m         \u001b[38;5;66;03m# TODO(mamu): Handle multi-objective cases.\u001b[39;00m\n\u001b[1;32m    199\u001b[0m         state \u001b[38;5;241m=\u001b[39m TrialState\u001b[38;5;241m.\u001b[39mPRUNED\n",
      "Cell \u001b[0;32mIn[41], line 16\u001b[0m, in \u001b[0;36mobjective\u001b[0;34m(trial)\u001b[0m\n\u001b[1;32m      2\u001b[0m param \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnum_leaves\u001b[39m\u001b[38;5;124m'\u001b[39m: trial\u001b[38;5;241m.\u001b[39msuggest_int(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnum_leaves\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;241m20\u001b[39m, \u001b[38;5;241m1000\u001b[39m),\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmax_depth\u001b[39m\u001b[38;5;124m'\u001b[39m: trial\u001b[38;5;241m.\u001b[39msuggest_int(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmax_depth\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m16\u001b[39m),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mforce_row_wise\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28;01mTrue\u001b[39;00m \n\u001b[1;32m     13\u001b[0m }\n\u001b[1;32m     15\u001b[0m model \u001b[38;5;241m=\u001b[39m lgb\u001b[38;5;241m.\u001b[39mLGBMRegressor(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparam)\n\u001b[0;32m---> 16\u001b[0m model\u001b[38;5;241m.\u001b[39mfit(train_X_encoded, train_Y_encoded, eval_set\u001b[38;5;241m=\u001b[39m[(test_X_encoded, test_Y_encoded)])\n\u001b[1;32m     17\u001b[0m preds \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict(test_X_encoded)\n\u001b[1;32m     18\u001b[0m cor \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mcorrcoef(test_Y_encoded, preds)[\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m]\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/lightgbm/sklearn.py:1092\u001b[0m, in \u001b[0;36mLGBMRegressor.fit\u001b[0;34m(self, X, y, sample_weight, init_score, eval_set, eval_names, eval_sample_weight, eval_init_score, eval_metric, feature_name, categorical_feature, callbacks, init_model)\u001b[0m\n\u001b[1;32m   1075\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfit\u001b[39m(  \u001b[38;5;66;03m# type: ignore[override]\u001b[39;00m\n\u001b[1;32m   1076\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   1077\u001b[0m     X: _LGBM_ScikitMatrixLike,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1089\u001b[0m     init_model: Optional[Union[\u001b[38;5;28mstr\u001b[39m, Path, Booster, LGBMModel]] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1090\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLGBMRegressor\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m   1091\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Docstring is inherited from the LGBMModel.\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1092\u001b[0m     \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mfit(\n\u001b[1;32m   1093\u001b[0m         X,\n\u001b[1;32m   1094\u001b[0m         y,\n\u001b[1;32m   1095\u001b[0m         sample_weight\u001b[38;5;241m=\u001b[39msample_weight,\n\u001b[1;32m   1096\u001b[0m         init_score\u001b[38;5;241m=\u001b[39minit_score,\n\u001b[1;32m   1097\u001b[0m         eval_set\u001b[38;5;241m=\u001b[39meval_set,\n\u001b[1;32m   1098\u001b[0m         eval_names\u001b[38;5;241m=\u001b[39meval_names,\n\u001b[1;32m   1099\u001b[0m         eval_sample_weight\u001b[38;5;241m=\u001b[39meval_sample_weight,\n\u001b[1;32m   1100\u001b[0m         eval_init_score\u001b[38;5;241m=\u001b[39meval_init_score,\n\u001b[1;32m   1101\u001b[0m         eval_metric\u001b[38;5;241m=\u001b[39meval_metric,\n\u001b[1;32m   1102\u001b[0m         feature_name\u001b[38;5;241m=\u001b[39mfeature_name,\n\u001b[1;32m   1103\u001b[0m         categorical_feature\u001b[38;5;241m=\u001b[39mcategorical_feature,\n\u001b[1;32m   1104\u001b[0m         callbacks\u001b[38;5;241m=\u001b[39mcallbacks,\n\u001b[1;32m   1105\u001b[0m         init_model\u001b[38;5;241m=\u001b[39minit_model\n\u001b[1;32m   1106\u001b[0m     )\n\u001b[1;32m   1107\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/lightgbm/sklearn.py:885\u001b[0m, in \u001b[0;36mLGBMModel.fit\u001b[0;34m(self, X, y, sample_weight, init_score, group, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_group, eval_metric, feature_name, categorical_feature, callbacks, init_model)\u001b[0m\n\u001b[1;32m    882\u001b[0m evals_result: _EvalResultDict \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m    883\u001b[0m callbacks\u001b[38;5;241m.\u001b[39mappend(record_evaluation(evals_result))\n\u001b[0;32m--> 885\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_Booster \u001b[38;5;241m=\u001b[39m train(\n\u001b[1;32m    886\u001b[0m     params\u001b[38;5;241m=\u001b[39mparams,\n\u001b[1;32m    887\u001b[0m     train_set\u001b[38;5;241m=\u001b[39mtrain_set,\n\u001b[1;32m    888\u001b[0m     num_boost_round\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_estimators,\n\u001b[1;32m    889\u001b[0m     valid_sets\u001b[38;5;241m=\u001b[39mvalid_sets,\n\u001b[1;32m    890\u001b[0m     valid_names\u001b[38;5;241m=\u001b[39meval_names,\n\u001b[1;32m    891\u001b[0m     feval\u001b[38;5;241m=\u001b[39meval_metrics_callable,  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[1;32m    892\u001b[0m     init_model\u001b[38;5;241m=\u001b[39minit_model,\n\u001b[1;32m    893\u001b[0m     feature_name\u001b[38;5;241m=\u001b[39mfeature_name,\n\u001b[1;32m    894\u001b[0m     callbacks\u001b[38;5;241m=\u001b[39mcallbacks\n\u001b[1;32m    895\u001b[0m )\n\u001b[1;32m    897\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_evals_result \u001b[38;5;241m=\u001b[39m evals_result\n\u001b[1;32m    898\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_best_iteration \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_Booster\u001b[38;5;241m.\u001b[39mbest_iteration\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/lightgbm/engine.py:276\u001b[0m, in \u001b[0;36mtrain\u001b[0;34m(params, train_set, num_boost_round, valid_sets, valid_names, feval, init_model, feature_name, categorical_feature, keep_training_booster, callbacks)\u001b[0m\n\u001b[1;32m    268\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m cb \u001b[38;5;129;01min\u001b[39;00m callbacks_before_iter:\n\u001b[1;32m    269\u001b[0m     cb(callback\u001b[38;5;241m.\u001b[39mCallbackEnv(model\u001b[38;5;241m=\u001b[39mbooster,\n\u001b[1;32m    270\u001b[0m                             params\u001b[38;5;241m=\u001b[39mparams,\n\u001b[1;32m    271\u001b[0m                             iteration\u001b[38;5;241m=\u001b[39mi,\n\u001b[1;32m    272\u001b[0m                             begin_iteration\u001b[38;5;241m=\u001b[39minit_iteration,\n\u001b[1;32m    273\u001b[0m                             end_iteration\u001b[38;5;241m=\u001b[39minit_iteration \u001b[38;5;241m+\u001b[39m num_boost_round,\n\u001b[1;32m    274\u001b[0m                             evaluation_result_list\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[0;32m--> 276\u001b[0m booster\u001b[38;5;241m.\u001b[39mupdate(fobj\u001b[38;5;241m=\u001b[39mfobj)\n\u001b[1;32m    278\u001b[0m evaluation_result_list: List[_LGBM_BoosterEvalMethodResultType] \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    279\u001b[0m \u001b[38;5;66;03m# check evaluation result.\u001b[39;00m\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.11/site-packages/lightgbm/basic.py:3891\u001b[0m, in \u001b[0;36mBooster.update\u001b[0;34m(self, train_set, fobj)\u001b[0m\n\u001b[1;32m   3889\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__set_objective_to_none:\n\u001b[1;32m   3890\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m LightGBMError(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCannot update due to null objective function.\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m-> 3891\u001b[0m _safe_call(_LIB\u001b[38;5;241m.\u001b[39mLGBM_BoosterUpdateOneIter(\n\u001b[1;32m   3892\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle,\n\u001b[1;32m   3893\u001b[0m     ctypes\u001b[38;5;241m.\u001b[39mbyref(is_finished)))\n\u001b[1;32m   3894\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__is_predicted_cur_iter \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;01mFalse\u001b[39;00m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__num_dataset)]\n\u001b[1;32m   3895\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m is_finished\u001b[38;5;241m.\u001b[39mvalue \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "def objective(trial):\n",
    "    param = {\n",
    "        'num_leaves': trial.suggest_int('num_leaves', 20, 1000),\n",
    "        'max_depth': trial.suggest_int('max_depth', -1, 16),\n",
    "        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 1e-1),\n",
    "        'n_estimators': trial.suggest_int('n_estimators', 100, 1000),\n",
    "        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-4, 1.0),\n",
    "        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-4, 1.0),\n",
    "        'boosting_type': 'gbdt',\n",
    "        'objective': 'regression',\n",
    "        'metric': 'rmse',\n",
    "        'force_row_wise': True \n",
    "    }\n",
    "\n",
    "    model = lgb.LGBMRegressor(**param)\n",
    "    model.fit(train_X_encoded, train_Y_encoded, eval_set=[(test_X_encoded, test_Y_encoded)])\n",
    "    preds = model.predict(test_X_encoded)\n",
    "    cor = np.corrcoef(test_Y_encoded, preds)[0, 1]\n",
    "    return cor\n",
    "\n",
    "study = optuna.create_study(direction='maximize')\n",
    "study.optimize(objective, n_trials=5)\n",
    "\n",
    "print('Best trial:', study.best_trial.params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "16660712-6f13-4b37-9f05-3d878b7eccd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.130404 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3347\n",
      "[LightGBM] [Info] Number of data points in the train set: 5254138, number of used features: 37\n",
      "[LightGBM] [Info] Start training from score 99.998886\n",
      "correlation: 0.9767993842633524\n"
     ]
    }
   ],
   "source": [
    "# LGBM\n",
    "params = {\n",
    "    'num_leaves': 324, \n",
    "    'learning_rate': 0.07856391156719868, \n",
    "    'n_estimators': 366, \n",
    "    'reg_alpha': 0.0010075543266694809, \n",
    "    'reg_lambda': 0.00016625763825607197}\n",
    "\n",
    "# 모델 학습\n",
    "LGBM_model = lgb.LGBMRegressor(**params, random_state = 42)\n",
    "LGBM_model.fit(train_X_encoded, train_Y_encoded, eval_set=[(test_X_encoded, test_Y_encoded)])\n",
    "\n",
    "# 예측\n",
    "pred_LGBM = LGBM_model.predict(test_X_encoded)\n",
    "\n",
    "# 성능 평가\n",
    "cor_LGBM = np.corrcoef(test_Y_encoded, pred_LGBM)[0, 1]\n",
    "print(f'correlation: {cor_LGBM}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d33c4514-a3c7-4ae4-837f-e7c39998fb01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importances_LGBM = LGBM_model.feature_importances_\n",
    "\n",
    "feature_names = train_X_encoded.columns\n",
    "\n",
    "feature_importance_df_LGBM = pd.DataFrame({\n",
    "    'Feature': feature_names,\n",
    "    'Importance': feature_importances_LGBM\n",
    "})\n",
    "\n",
    "feature_importance_df_LGBM = feature_importance_df_LGBM.sort_values(by='Importance', ascending=False)\n",
    "\n",
    "top_10_features_LGBM = feature_importance_df_LGBM.head(10)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.barh(top_10_features_LGBM['Feature'], top_10_features_LGBM['Importance'], color='skyblue')\n",
    "plt.xlabel('Importance')\n",
    "plt.ylabel('Feature')\n",
    "plt.title('Top 10 Feature Importances')\n",
    "plt.gca().invert_yaxis() \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b3a1c9a-689f-470f-a1c6-ede3ed2d805d",
   "metadata": {},
   "source": [
    "## Optuna로 최적 파라미터 탐색 (CatBoost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f2d7635-ebb5-421a-bc99-6abf1d8d9e1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def objective(trial):\n",
    "    param = {\n",
    "        'iterations': trial.suggest_int('iterations', 100, 5000),\n",
    "        'depth': trial.suggest_int('depth', 4, 8), \n",
    "        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-3, 1e-1), \n",
    "        'random_strength': trial.suggest_loguniform('random_strength', 1e-5, 1), \n",
    "        'bagging_temperature': trial.suggest_loguniform('bagging_temperature', 0.01, 1),\n",
    "        'border_count': trial.suggest_int('border_count', 32, 128),\n",
    "        'l2_leaf_reg': trial.suggest_loguniform('l2_leaf_reg', 1e-4, 1),\n",
    "    }\n",
    "    \n",
    "    model = CatBoostRegressor(**param, logging_level='Silent')\n",
    "    model.fit(train_X_encoded, train_Y_encoded, eval_set=[(test_X_encoded, test_Y_encoded)])\n",
    "    preds = model.predict(test_X_encoded)\n",
    "    cor = np.corrcoef(test_Y_encoded, preds)[0, 1]\n",
    "    return cor\n",
    "\n",
    "# Optuna 스터디 생성 및 최적화 실행\n",
    "study = optuna.create_study(direction='maximize')\n",
    "study.optimize(objective, n_trials=5) \n",
    "\n",
    "print(f'Best trial: {study.best_trial.params}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fe6b4883-addf-414d-8eb0-da6c08773ea5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\tlearn: 24.3949941\ttest: 25.1379226\tbest: 25.1379226 (0)\ttotal: 346ms\tremaining: 5m 45s\n",
      "100:\tlearn: 7.3239164\ttest: 7.9401309\tbest: 7.9401309 (100)\ttotal: 30.6s\tremaining: 4m 32s\n",
      "200:\tlearn: 6.0179656\ttest: 6.9046179\tbest: 6.9046179 (200)\ttotal: 58s\tremaining: 3m 50s\n",
      "300:\tlearn: 5.6130108\ttest: 6.6414591\tbest: 6.6414591 (300)\ttotal: 1m 25s\tremaining: 3m 18s\n",
      "400:\tlearn: 5.3734308\ttest: 6.4729129\tbest: 6.4729129 (400)\ttotal: 1m 52s\tremaining: 2m 48s\n",
      "500:\tlearn: 5.1920768\ttest: 6.3544675\tbest: 6.3544675 (500)\ttotal: 2m 19s\tremaining: 2m 18s\n",
      "600:\tlearn: 5.0553557\ttest: 6.2740929\tbest: 6.2740929 (600)\ttotal: 2m 43s\tremaining: 1m 48s\n",
      "700:\tlearn: 4.9393993\ttest: 6.2012579\tbest: 6.2012579 (700)\ttotal: 3m 8s\tremaining: 1m 20s\n",
      "800:\tlearn: 4.8420032\ttest: 6.1397610\tbest: 6.1397610 (800)\ttotal: 3m 32s\tremaining: 52.9s\n",
      "900:\tlearn: 4.7576854\ttest: 6.0961070\tbest: 6.0961070 (900)\ttotal: 3m 57s\tremaining: 26.1s\n",
      "999:\tlearn: 4.6888623\ttest: 6.0603127\tbest: 6.0602553 (994)\ttotal: 4m 22s\tremaining: 0us\n",
      "\n",
      "bestTest = 6.060255349\n",
      "bestIteration = 994\n",
      "\n",
      "Shrink model to first 995 iterations.\n",
      "0.9735493064526667\n"
     ]
    }
   ],
   "source": [
    "cat_params = {'iterations': 1000, \n",
    "              'depth': 7, \n",
    "              'learning_rate': 0.0233}\n",
    "catboost_model = CatBoostRegressor(**cat_params, random_state = 42, verbose = 100)\n",
    "\n",
    "\n",
    "# CatBoost는 Pool 객체를 사용하여 범주형 데이터를 처리할 수 있음\n",
    "train_pool = Pool(train_X_encoded, train_Y_encoded)\n",
    "test_pool = Pool(test_X_encoded, test_Y_encoded)\n",
    "\n",
    "# 모델 학습\n",
    "catboost_model.fit(train_pool, eval_set=test_pool)\n",
    "\n",
    "# 예측\n",
    "pred_cat_boost = catboost_model.predict(test_X_encoded)\n",
    "cor_cat_boost = np.corrcoef(test_Y_encoded, pred_cat_boost)[0, 1]\n",
    "\n",
    "print(cor_cat_boost)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80cef0f8-dcc0-40ad-8876-3787627f44ba",
   "metadata": {},
   "source": [
    "## Stacking으로 앙상블 한 모델"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "85d49260-4011-40b0-89cc-f6f8feafd684",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 세 모델 앙상블하기\n",
    "xgb_stack_train = XGBoost_model.predict(train_X_encoded)\n",
    "xgb_stack_test = XGBoost_model.predict(test_X_encoded)\n",
    "\n",
    "lgbm_stack_train = LGBM_model.predict(train_X_encoded)\n",
    "lgbm_stack_test = LGBM_model.predict(test_X_encoded)\n",
    "\n",
    "catboost_stack_train = catboost_model.predict(train_X_encoded)\n",
    "catboost_stack_test = catboost_model.predict(test_X_encoded)\n",
    "\n",
    "stacked_train = np.column_stack((xgb_stack_train, lgbm_stack_train, catboost_stack_train))\n",
    "stacked_test = np.column_stack((xgb_stack_test, lgbm_stack_test, catboost_stack_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "04a95148-9138-4328-aaa4-7c5da4e2fc76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Lasso<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.Lasso.html\">?<span>Documentation for Lasso</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Lasso(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "Lasso(random_state=42)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meta_model = Ridge(alpha=1.0, random_state = 42) # 릿지\n",
    "meta_model.fit(stacked_train, train_Y_encoded) # 라쏘\n",
    "\n",
    "meta_model_lasso = Lasso(alpha=1.0, random_state=42)\n",
    "meta_model_lasso.fit(stacked_train, train_Y_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6c22e679-48d2-4dd7-95ee-98f133c67c6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stacked Model Corr: 0.9761702143723813\n",
      "Stacked Model_lasso Corr: 0.9767993842633482\n"
     ]
    }
   ],
   "source": [
    "stacked_pred = meta_model.predict(stacked_test)\n",
    "stacked_correlation = np.corrcoef(test_Y_encoded, stacked_pred)[0,1]\n",
    "print(f'Stacked Model Corr: {stacked_correlation}')\n",
    "\n",
    "lasso_stacked_pred = meta_model_lasso.predict(stacked_test)\n",
    "stacked_correlation_lasso = np.corrcoef(test_Y_encoded, lasso_stacked_pred)[0,1]\n",
    "print(f'Stacked Model_lasso Corr: {stacked_correlation_lasso}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a01e85e-b627-4943-9eed-30b5f060192f",
   "metadata": {},
   "source": [
    "최종 검증"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "8a5c438d-49cc-4f26-b904-4c4b95a0d8d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_valid = test\n",
    "\n",
    "all_data = pd.concat([X, test_valid])\n",
    "all_data = pd.get_dummies(all_data, columns = ['도시'])\n",
    "X_train = all_data.iloc[:X.shape[0], :].reset_index(drop = True)\n",
    "test_valid = all_data.iloc[X.shape[0]:, :].reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1d6ece08-d45b-4e30-b262-740125bccaec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# XGBoost 모델 초기화\n",
    "model = XGBRegressor(**best_params, random_state = 42)\n",
    "\n",
    "# 모델 학습\n",
    "model.fit(X_train, Y)\n",
    "\n",
    "preds = model.predict(test_valid)\n",
    "\n",
    "# 검증용 데이터\n",
    "valid_set = pd.read_csv('/Users/jangjuik/Desktop/electric/code/electric_valid.csv')\n",
    "valid_set['elect'] = preds\n",
    "\n",
    "valid_set.to_csv('240106.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
